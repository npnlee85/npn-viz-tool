/*
 * Regs-Dot-Gov-Directives
 * Version: 0.1.0 - 2015-05-05
 */
angular.module("npn-viz-tool.bounds",["npn-viz-tool.filter","uiGmapgoogle-maps"]).directive("boundsManager",["$rootScope","$log","uiGmapGoogleMapApi","FilterService","BoundsFilterArg",function(a,b,c,d,e){return{restrict:"E",template:'<ui-gmap-drawing-manager options="options" control="control"></ui-gmap-drawing-manager>',controller:["$scope",function(f){function g(){d.getFilter().hasSufficientCriteria()&&a.$broadcast("filter-rerun-phase2",{})}c.then(function(a){var c=a,h={drawingModes:[c.drawing.OverlayType.RECTANGLE],position:c.ControlPosition.TOP_RIGHT,drawingControl:!1};b.debug("api",a),f.options={drawingControlOptions:h,rectangleOptions:e.RECTANGLE_OPTIONS},f.control={},f.$on("bounds-filter-ready",function(a,b){c.event.addListener(b.filter.arg,"mouseover",function(){b.filter.arg.setOptions(angular.extend({},e.RECTANGLE_OPTIONS,{strokeWeight:2}))}),c.event.addListener(b.filter.arg,"mouseout",function(){b.filter.arg.setOptions(e.RECTANGLE_OPTIONS)}),c.event.addListener(b.filter.arg,"rightclick",function(){d.removeFromFilter(b.filter),g()})}),f.$watch("control.getDrawingManager",function(){if(f.control.getDrawingManager){var a=f.control.getDrawingManager();c.event.addListener(a,"rectanglecomplete",function(b){a.setDrawingMode(null),d.addToFilter(new e(b)),g()}),f.$on("filter-reset",function(){h.drawingControl=!1,a.setOptions(h)}),f.$on("filter-update",function(){h.drawingControl=d.hasSufficientCriteria(),a.setOptions(h)})}})})}]}}]),angular.module("npn-viz-tool.vis-cache",["angular-md5"]).factory("CacheService",["$log","$timeout","md5",function(a,b,c){var d=[],e={keyFromObject:function(a){return c.createHash(JSON.stringify(a))},dump:function(){a.debug("cache",d)},put:function(c,e){if(null!=c){if(null==e)return a.debug("removing cached object '"+c+"'",d[c]),void(d[c]=null);var f=arguments.length>2?arguments[2]:3e5,g=0>f?-1:(new Date).getTime()+f;a.debug("caching (expiry:"+g+") '"+c+"'",e),d[c]={data:e,expiry:g},f>0&&b(function(){a.debug("expiring cached object '"+c+"'",d[c]),d[c]=null},f)}},get:function(b){var c=d[b];return null==c?arguments.length>1?arguments[1]:null:c.expiry<0||c.expiry>(new Date).getTime()?(a.debug("cache entry '"+b+"' is valid returning."),c.data):(a.debug("cache entry '"+b+"' has expired."),delete d[b],arguments.length>1?arguments[1]:null)}};return e}]),angular.module("npn-viz-tool.vis-calendar",["npn-viz-tool.vis","npn-viz-tool.filter","npn-viz-tool.filters","ui.bootstrap"]).controller("CalendarVisCtrl",["$scope","$modalInstance","$http","$timeout","$filter","$log","FilterService","ChartService",function(a,b,c,d,e,f,g,h){function i(){a.selection.color<a.colors.length?a.selection.color++:a.selection.color=0}function j(b){f.debug("addToPlot",b),b&&(-1===b.phenophase_id?(f.debug("add all phenophases..."),l(b.species_id),a.phenophaseList.filter(function(a){return-1!==a.phenophase_id}).forEach(function(b){j(angular.extend(a.selection.species,b))})):(a.toPlot.push(k(b)),i()),a.data=t=void 0)}function k(b){var c=b||angular.extend({},a.selection.species,a.selection.phenophase);return angular.extend({},c,{color:a.selection.color})}function l(b){for(;;){var c,d=-1;for(c=0;c<a.toPlot.length;c++)if(a.toPlot[c].species_id===b){d=c;break}if(-1===d)break;a.removeFromPlot(d)}}function m(b){var c=-1*(z.rangeBand()/2+a.yAxisConfig.labelOffset);b.selectAll("text").attr("x",0).attr("dy",c).attr("style","text-anchor: start; font-size: "+a.yAxisConfig.fontSize+"em;")}function n(){z.rangeBands([v.height,0],a.yAxisConfig.bandPadding,.5),t&&t.labels&&z.domain(d3.range(0,t.labels.length)),A.scale(z),u&&u.selectAll("g .y.axis").call(A).call(m)}function o(a,b,c){var d=a+b;return Number(d.toFixed(c))}function p(a){return t&&t.labels&&a<t.labels.length?t.labels[a]:""}function q(){var a,b=[1],c=1;for(a=1;12>a;a++){var d=new Date(1900,a);d.setTime(d.getTime()-h.ONE_DAY_MILLIS),c+=d.getDate(),b.push(c)}return x.domain().filter(function(a){return-1!==b.indexOf(a)})}function r(a){var b=new Date(1900,0);return b.setTime(b.getTime()+h.ONE_DAY_MILLIS*a),w(b)}function s(){if(t){a.working=!0,x.rangeBands([0,v.width],-.1,.5),y.scale(x),u.selectAll("g .x.axis").call(y),n();var b=u.selectAll(".doy").data(t.data);b.exit().remove(),b.enter().insert("line",":first-child").attr("class","doy");var c=Math.ceil(x.rangeBand()/2),d=z.rangeBand()/2;b.attr("x1",function(a){return x(a.x)-c}).attr("y1",function(a){return z(a.y)+d}).attr("x2",function(a){return x(a.x)+c}).attr("y2",function(a){return z(a.y)+d}).attr("doy-point",function(a){return"("+a.x+","+a.y+")"}).attr("stroke",function(b){return a.colorRange[b.color]}).attr("stroke-width",z.rangeBand()).append("title").text(function(a){return a.x}),a.working=!1}}var t,u,v=(g.getFilter().getDateArg(),h.getSizeInfo({top:20,right:35,bottom:35,left:35})),w=d3.time.format("%B"),x=d3.scale.ordinal().rangeBands([0,v.width]).domain(d3.range(1,366)),y=d3.svg.axis().scale(x).orient("bottom").tickValues(q()).tickFormat(r),z=d3.scale.ordinal().rangeBands([v.height,0]).domain(d3.range(0,6)),A=d3.svg.axis().scale(z).orient("right").tickSize(v.width).tickFormat(function(a){return a}).tickFormat(p);a.validYears=d3.range(1900,(new Date).getFullYear()+1),a.modal=b;var B=g.getColorScale();a.colors=B.domain(),a.colorRange=B.range(),a.selection={color:0,year:(new Date).getFullYear()},a.toPlotYears=[],a.toPlot=[],g.getFilter().getSpeciesList().then(function(b){f.debug("speciesList",b),a.speciesList=b,b.length&&(a.selection.species=b[0])}),a.$watch("selection.species",function(){a.phenophaseList=[],a.selection.species&&g.getFilter().getPhenophasesForSpecies(a.selection.species.species_id).then(function(b){f.debug("phenophaseList",b),b.length&&b.splice(0,0,{phenophase_id:-1,phenophase_name:"All phenophases"}),a.phenophaseList=b,b.length&&(a.selection.phenophase=b[0])})}),a.canAddToPlot=function(){if(!a.selection.species||!a.selection.phenophase)return!1;if(0===a.toPlot.length)return!0;var b,c=k();for(b=0;b<a.toPlot.length;b++)if(angular.equals(a.toPlot[b],c))return!1;for(b=0;b<a.toPlot.length;b++)if(c.color===a.toPlot[b].color)return!1;return!0},a.addToPlot=function(){j(k())},a.removeFromPlot=function(b){a.toPlot.splice(b,1),a.data=t=void 0},a.addYear=function(){a.selection.year&&(a.toPlotYears.push(a.selection.year),a.toPlotYears.sort(),a.data=t=void 0)},a.canAddYear=function(){return a.toPlotYears.length<2&&a.selection.year&&-1===a.toPlotYears.indexOf(a.selection.year)&&-1!==a.validYears.indexOf(a.selection.year)},a.removeYear=function(b){a.toPlotYears.splice(b,1),a.data=t=void 0},d(function(){u=d3.select(".chart").attr("width",v.width+v.margin.left+v.margin.right).attr("height",v.height+v.margin.top+v.margin.bottom).append("g").attr("transform","translate("+v.margin.left+","+v.margin.top+")"),u.append("g").attr("class","x axis").attr("transform","translate(0,"+v.height+")").call(y),u.append("g").attr("class","y axis").call(A).call(m),u.selectAll("g .x.axis text").attr("style","font-size: .95em")},500),a.yAxisConfig={labelOffset:4,bandPadding:.5,fontSize:.95},a.$watch("yAxisConfig.labelOffset",s),a.$watch("yAxisConfig.bandPadding",s),a.$watch("yAxisConfig.fontSize",s),a.incrBandPadding=function(){a.yAxisConfig.bandPadding=o(a.yAxisConfig.bandPadding,.05,2)},a.decrBandPadding=function(){a.yAxisConfig.bandPadding=o(a.yAxisConfig.bandPadding,-.05,2)},a.incrFontSize=function(){a.yAxisConfig.fontSize=o(a.yAxisConfig.fontSize,-.05,2)},a.decrFontSize=function(){a.yAxisConfig.fontSize=o(a.yAxisConfig.fontSize,.05,2)},a.visualize=function(){if(t)return s();a.working=!0,f.debug("visualize",a.selection.axis,a.toPlot);var b=(g.getFilter().getDateArg(),{request_src:"npn-vis-calendar"}),c={};a.toPlotYears.forEach(function(a,c){b["year["+c+"]"]=a}),angular.forEach(a.toPlot,function(a,d){c[a.species_id+"."+a.phenophase_id]=a.color,b["species_id["+d+"]"]=a.species_id,b["phenophase_id["+d+"]"]=a.phenophase_id}),a.error_message=void 0,h.getPositiveDates(b,function(b){if(b.error_message)return f.warn("Received error",b),a.error_message=b.error_message,void(a.working=!1);var c={},d={labels:[],data:[]},g=a.toPlot.length*a.toPlotYears.length-1;angular.forEach(b,function(a){c[a.species_id]=a;var b={};angular.forEach(a.phenophases,function(a){b[a.phenophase_id]=a}),a.phenophases=b}),f.debug("speciesMap",c),angular.forEach(a.toPlot,function(b){f.debug("toPlot",b);var h=c[b.species_id],i=h.phenophases[b.phenophase_id];angular.forEach(a.toPlotYears,function(a){if(i){var c=i.years[a];f.debug("year",g,a,h.common_name,i,c),angular.forEach(c,function(a){d.data.push({y:g,x:a,color:b.color})})}d.labels.splice(0,0,e("speciesTitle")(b)+"/"+b.phenophase_name+" ("+a+")"),f.debug("y of "+g+" is for "+d.labels[0]),g--})}),a.data=t=d,f.debug("calendar data",t),s()})}}]),angular.module("npn-viz-tool.cluster",[]).factory("ClusterService",[function(){var a={getDefaultClusterOptions:function(){var a=[0,1,2,4,8,16,32,64,128,256].map(function(a){return{n:1e3*a,url:"cluster/m"+a+".png",width:52,height:52,textColor:"#fff"}});return{styles:a,maxZoom:12}}};return a}]),angular.module("npn-viz-tool.export",["npn-viz-tool.filter"]).directive("exportControl",["$log","$http","$window","FilterService",function(a,b,c,d){return{restrict:"E",template:'<a title="Export" href id="export-control" class="btn btn-default btn-xs" ng-disabled="!getFilteredMarkers().length" ng-click="exportData()"><i class="fa fa-download"></i></a>',controller:["$scope",function(e){e.getFilteredMarkers=d.getFilteredMarkers,e.exportData=function(){var e=d.getFilter(),f={date:e.getDateArg().toExportParam()};e.getSpeciesArgs().length&&(f.species=[],e.getSpeciesArgs().forEach(function(a){f.species.push(a.toExportParam())})),e.getNetworkArgs().length&&(f.networks=[],e.getNetworkArgs().forEach(function(a){f.networks.push(a.toExportParam())})),e.getGeographicArgs().length&&(f.stations=[],d.getFilteredMarkers().forEach(function(a){f.stations.push(a.station_id)})),a.debug("export.params",f),b({method:"POST",url:"/ddt/observations/setSearchParams",data:f}).success(function(){c.open("/ddt/observations")})}}]}}]),angular.module("npn-viz-tool.filter",["npn-viz-tool.settings","npn-viz-tool.stations","npn-viz-tool.cluster","npn-viz-tool.vis-cache","angular-md5","isteven-multi-select"]).factory("FilterArg",[function(){var a=function(a){this.arg=a};return a.prototype.getArg=function(){return this.arg},a.prototype.$filter=function(){return!0},a.prototype.$removed=function(){},a}]).factory("DateFilterArg",["FilterArg",function(a){var b=function(b){b&&(b.start_date&&"number"!=typeof b.start_date&&(b.start_date=parseInt(b.start_date)),b.end_date&&"number"!=typeof b.end_date&&(b.end_date=parseInt(b.end_date))),a.apply(this,arguments)};return b.prototype.getId=function(){return"date"},b.prototype.getStartDate=function(){return this.arg.start_date+"-01-01"},b.prototype.getEndDate=function(){return this.arg.end_date+"-12-31"},b.prototype.toExportParam=function(){return{start:this.arg.start_date,end:this.arg.end_date}},b.prototype.toString=function(){return this.arg.start_date+"-"+this.arg.end_date},b.fromString=function(a){var c=a.indexOf("-");return new b({start_date:a.substring(0,c),end_date:a.substring(c+1)})},b}]).factory("NetworkFilterArg",["$http","$rootScope","$log","FilterArg","SpeciesFilterArg",function(a,b,c,d,e){var f=function(){d.apply(this,arguments),this.counts={station:"?",observation:"?"},this.stations=[];var a=this;b.$broadcast("network-filter-ready",{filter:a})};return f.prototype.getId=function(){return parseInt(this.arg.network_id)},f.prototype.toExportParam=function(){return this.getId()},f.prototype.toString=function(){return this.arg.network_id},f.prototype.resetCounts=function(a){this.counts.station=this.counts.observation=a,this.stations=[]},f.prototype.updateCounts=function(a,b){var c,d=this.getId();if(-1!==a.networks.indexOf(d)){-1===this.stations.indexOf(a.station_id)&&(this.stations.push(a.station_id),this.counts.station++);for(c in b)b[c].$match&&(this.counts.observation+=e.countObservationsForPhenophase(b[c]))}},f.fromString=function(b){return a.get("/npn_portal/networks/getPartnerNetworks.json",{params:{active_only:!0}}).then(function(a){for(var d=a.data,e=0;d&&e<d.length;e++)if(b===d[e].network_id)return new f(d[e]);c.warn("NO NETWORK FOUND WITH ID "+b)})},f}]).factory("SpeciesFilterArg",["$http","$rootScope","FilterArg",function(a,b,c){var d=function(d,e){c.apply(this,arguments),this.counts={station:"?",observation:"?"},e&&"*"!=e&&(this.phenophaseSelections=e.split(","));var f=this;a.get("/npn_portal/phenophases/getPhenophasesForSpecies.json",{params:{return_all:!0,species_id:f.arg.species_id}}).success(function(a){var c={};f.phenophases=a[0].phenophases.filter(function(a){return c[a.phenophase_id]?!1:(c[a.phenophase_id]=a,a.selected=!f.phenophaseSelections||-1!=f.phenophaseSelections.indexOf(a.phenophase_id),!0)}),f.phenophasesMap={},angular.forEach(f.phenophases,function(a){f.phenophasesMap[a.phenophase_id]=a}),b.$broadcast("species-filter-ready",{filter:f})})};return d.countObservationsForPhenophase=function(a){var b=0;return a.y&&(b+=a.y),a.n&&(b+=a.n),a.q&&(b+=a.q),b},d.prototype.getId=function(){return parseInt(this.arg.species_id)},d.prototype.getPhenophaseList=function(){return angular.copy(this.phenophases)},d.prototype.resetCounts=function(a){this.counts.station=this.counts.observation=a,angular.forEach(this.phenophases,function(a){a.count=0})},d.prototype.$filter=function(a){var b=this,c=0,e=Object.keys(a).filter(function(e){var f=d.countObservationsForPhenophase(a[e]);return b.phenophasesMap[e].count+=f,a[e].$match=b.phenophasesMap[e].selected,a[e].$match&&(c+=f),a[e].$match});return e.length>0&&b.counts.station++,b.counts.observation+=c,c},d.prototype.toExportParam=function(){var a={species_id:this.getId(),common_name:this.arg.common_name},b=this.phenophases.filter(function(a){return a.selected});return b.length!==this.phenophases.length&&(a.phenophases=b.map(function(a){return parseInt(a.phenophase_id)})),a},d.prototype.toString=function(){var a=this.arg.species_id+":",b=this.phenophases.filter(function(a){return a.selected});return b.length===this.phenophases.length?a+="*":b.forEach(function(b,c){a+=(c>0?",":"")+b.phenophase_id}),a},d.fromString=function(b){var c=b.indexOf(":"),e=b.substring(0,c),f=b.substring(c+1);return a.get("/npn_portal/species/getSpeciesById.json",{params:{species_id:e}}).then(function(a){return a.data.species_id=e,new d(a.data,f)})},d}]).factory("GeoFilterArg",["FilterArg",function(a){function b(a,c){var d,e,f,g=c.getType();if("Polygon"==g){for(e=c.getArray(),f=0;f<e.length;f++)if(d=new google.maps.Polygon({paths:e[f].getArray()}),google.maps.geometry.poly.containsLocation(a,d)||google.maps.geometry.poly.isLocationOnEdge(a,d))return!0}else if("MultiPolygon"===g||"GeometryCollection"==g)for(e=c.getArray(),f=0;f<e.length;f++)if(b(a,e[f]))return!0;return!1}var c=function(b,c){a.apply(this,arguments),this.sourceId=c};return c.prototype.getId=function(){return this.arg.getProperty("NAME")},c.prototype.getSourceId=function(){return this.sourceId},c.prototype.getUid=function(){return this.getSourceId()+"-"+this.getId()},c.prototype.$filter=function(a){return b(new google.maps.LatLng(parseFloat(a.latitude),parseFloat(a.longitude)),this.arg.getGeometry())},c.prototype.toString=function(){return this.sourceId+":"+this.arg.getProperty("NAME")},c}]).factory("BoundsFilterArg",["$rootScope","FilterArg",function(a,b){var c=function(){b.apply(this,arguments);var c=this;a.$broadcast("bounds-filter-ready",{filter:c})};return c.RECTANGLE_OPTIONS={strokeColor:"#fff",strokeWeight:1,fillColor:"#000080",fillOpacity:.5,visible:!0,zIndex:1},c.prototype.getId=function(){return this.arg.getBounds().getCenter().toString()},c.prototype.getUid=function(){return this.getId()},c.prototype.$filter=function(a){return this.arg.getBounds().contains(new google.maps.LatLng(parseFloat(a.latitude),parseFloat(a.longitude)))},c.prototype.$removed=function(){this.arg.setMap(null)},c.prototype.toString=function(){var a=this.arg.getBounds(),b=a.getSouthWest(),c=a.getNorthEast(),d=4;return b.lat().toFixed(d)+","+b.lng().toFixed(d)+":"+c.lat().toFixed(d)+","+c.lng().toFixed(d)},c.fromString=function(a,b){var d=a.split(":"),e=d[0].split(","),f=new google.maps.LatLng(parseFloat(e[0]),parseFloat(e[1])),g=d[1].split(","),h=new google.maps.LatLng(parseFloat(g[0]),parseFloat(g[1])),i=new google.maps.LatLngBounds(f,h),j=new google.maps.Rectangle(c.RECTANGLE_OPTIONS);return j.setBounds(i),j.setMap(b),new c(j)},c}]).factory("NpnFilter",["$q","$http","DateFilterArg","SpeciesFilterArg","NetworkFilterArg","GeoFilterArg","BoundsFilterArg","CacheService",function(a,b,c,d,e,f,g,h){function i(a){var b,c=[];for(b in a)c.push(a[b]);return c}function j(a){return a&&Object.keys(a).forEach(function(b){a[b].$removed&&a[b].$removed()}),{}}var k=function(){this.reset()};return k.prototype.hasDate=function(){return!!this.date},k.prototype.hasCriteria=function(){return this.date?!0:Object.keys(this.species).length>0||Object.keys(this.networks).length>0},k.prototype.hasSufficientCriteria=function(){return this.date&&(Object.keys(this.species).length>0||Object.keys(this.networks).length>0)},k.prototype.getUpdateCount=function(){return this.updateCount},k.prototype.getDateArg=function(){return this.date},k.prototype.getSpeciesArg=function(a){return this.species[a]},k.prototype.getSpeciesArgs=function(){return i(this.species)},k.prototype.getNetworkArg=function(a){return this.networks[a]},k.prototype.getNetworkArgs=function(){return i(this.networks)},k.prototype.getCriteria=function(){var a=i(this.species);return this.date&&a.append(this.date),a},k.prototype.getGeoArgs=function(){return i(this.geo)},k.prototype.getBoundsArgs=function(){return i(this.bounds)},k.prototype.getGeographicArgs=function(){return this.getBoundsArgs().concat(this.getGeoArgs())},k.prototype.add=function(a){return this.updateCount++,a instanceof c?this.date=a:a instanceof d?this.species[a.getId()]=a:a instanceof e?this.networks[a.getId()]=a:a instanceof f?this.geo[a.getId()]=a:a instanceof g&&(this.bounds[a.getId()]=a),!(a instanceof f)},k.prototype.remove=function(a){return this.updateCount++,a instanceof c?(this.date=void 0,this.species={},this.networks={},this.bounds={}):a instanceof d?delete this.species[a.getId()]:a instanceof e?delete this.networks[a.getId()]:a instanceof f?delete this.geo[a.getId()]:a instanceof g&&delete this.bounds[a.getId()],a.$removed&&a.$removed(),!(a instanceof f||a instanceof g)},k.prototype.reset=function(){this.updateCount=0,this.date=void 0,this.species=j(this.species),this.geo=j(this.geo),this.networks=j(this.networks),this.bounds=j(this.bounds)},k.prototype.getSpeciesList=function(){var c=[],d=this.getSpeciesArgs(),e=this.getNetworkArgs(),f=a.defer();if(d.length)d.forEach(function(a){c.push(a.arg)}),f.resolve(c);else if(e.length){var g={},i=0;e.forEach(function(a){g["network_id["+i++ +"]"]=a.getId()});var j=h.keyFromObject(g);c=h.get(j),c&&c.length?f.resolve(c):b.get("/npn_portal/species/getSpeciesFilter.json",{params:g}).success(function(a){h.put(j,a),f.resolve(a)})}else f.resolve(c);return f.promise},k.prototype.getPhenophasesForSpecies=function(c){var d,e=this.getSpeciesArgs(),f=a.defer();if("string"==typeof c&&(c=parseInt(c)),e.length){var g=!1;for(d=0;d<e.length;d++)if(e[d].getId()===c){f.resolve(e[d].getPhenophaseList()),g=!0;break}g||f.resolve([])}else{var i={return_all:!0,species_id:c},j=h.keyFromObject(i),k=h.get(j);k&&k.length?f.resolve(k):b.get("/npn_portal/phenophases/getPhenophasesForSpecies.json",{params:i}).success(function(a){var b={},c=a[0].phenophases.filter(function(a){return b[a.phenophase_id]?!1:(b[a.phenophase_id]=a,!0)});h.put(j,c),f.resolve(c)})}return f.promise},k}]).factory("FilterService",["$q","$http","$rootScope","$timeout","$log","$filter","uiGmapGoogleMapApi","md5","NpnFilter","SpeciesFilterArg","SettingsService",function(a,b,c,d,e,f,g,h,i,j,k){function l(){if(y.hasCriteria()){var a={},b=y.getDateArg();return b&&(a.start_date=b.getStartDate(),a.end_date=b.getEndDate()),y.getSpeciesArgs().forEach(function(b,c){a["species_id["+c+"]"]=b.getId()}),y.getNetworkArgs().forEach(function(b,c){a["network_id["+c+"]"]=b.getId()}),a}}function m(a,b){function c(a,b){var c,d=Object.keys(a),f=Object.keys(b);if(d.length!==f.length+1&&e.warn("Issue with usage of _mapdiff, unexpected key lengths",a,b),1===d.length)return a[d[0]];for(c=0;c<d.length;c++)if(!b[d[c]])return a[d[c]];e.warn("Issue with usage of _mapdiff, unfound diff",a,b)}function d(){var a={};return angular.forEach(y.getGeographicArgs(),function(b){a[b.getUid()]=b}),a}function f(a,b){var c={hits:[],misses:[]};return angular.forEach(a,function(a){b(a)?c.hits.push(a):c.misses.push(a)}),c}var g,h=Date.now(),i=y.getGeographicArgs(),j=i.length,k=j>C.previousFilterCount,l=d();if(j>0&&C.previousFilterCount===j){if(angular.equals(Object.keys(l),Object.keys(C.previousFilterMap)))return e.debug("refilter but no change in geographic filters"),C.hits;e.warn("refilter but no change in geo filter count")}if(C.previousFilterCount=j,0===j)C.misses=[],C.hits=[].concat(a);else if(b&&1!==Object.keys(l).length)if(k){var m=c(l,C.previousFilterMap);g=f(C.misses,function(a){return m.$filter(a)}),C.hits=C.hits.concat(g.hits),C.misses=g.misses}else{var n=c(C.previousFilterMap,l);g=f(C.hits,function(a){return n.$filter(a)}),C.hits=g.misses,C.misses=C.misses.concat(g.hits)}else g=f(a,function(a){var b,c=!1;for(b=0;b<i.length&&!(c=i[b].$filter(a));b++);return c}),C.hits=g.hits,C.misses=g.misses;return C.previousFilterMap=l,e.debug("geo time:"+(Date.now()-h)),C.hits}function n(a,b){var d=Date.now();c.$broadcast("filter-phase2-start",{count:a.length});var g=0,i=y.getSpeciesArgs().length>0,l=y.getNetworkArgs(),n=f("speciesTitle"),o=k.getSettingValue("tagSpeciesTitle"),p=function(a,b){l.length&&angular.forEach(l,function(c){c.updateCounts(a,b)})},q=m(a,b).filter(function(a){a.markerOpts.icon.fillColor=A.fillColor;var b,c,d,f,h=0,k={};a.observationCount=0,a.speciesInfo=void 0;for(b in a.species)if(c=y.getSpeciesArg(b),k[b]=0,c||!i){if(c&&(d=c.$filter(a.species[b])))g+=d,a.observationCount+=d,k[b]++,h++,p(a,a.species[b]),a.speciesInfo||(a.speciesInfo={titles:{},counts:{}}),a.speciesInfo.titles[b]=n(c.arg,o),a.speciesInfo.counts[b]=d;else if(!c){for(f in a.species[b])a.species[b][f].$match=!0,d=j.countObservationsForPhenophase(a.species[b][f]),a.observationCount+=d,g+=d;h++,p(a,a.species[b])}}else e.warn("species found in results but not in filter",a.species[b]);k.n=0;for(b in k)"n"!=b&&k[b]>0&&k.n++;return a.markerOpts.title=a.station_name+" ("+a.observationCount+")",a.speciesInfo&&(a.markerOpts.title+=" ["+Object.keys(a.speciesInfo.titles).map(function(b){return a.speciesInfo.titles[b]}).join(",")+"]"),a.markerOpts.icon.strokeColor=k.n>1?"#00ff00":A.strokeColor,a.markerOpts.zIndex=a.observationCount+2,h>0}).map(function(a){return{latitude:a.latitude,longitude:a.longitude,markerOpts:a.markerOpts,station_id:a.station_id,station_name:a.station_name,observationCount:a.observationCount,speciesInfo:a.speciesInfo}});if(i){var r={};q.forEach(function(a){var b=Object.keys(a.speciesInfo.counts),c=b.reduce(function(b,c){return r[c]?(a.speciesInfo.counts[c]<r[c].min&&(r[c].min=a.speciesInfo.counts[c]),a.speciesInfo.counts[c]>r[c].max&&(r[c].max=a.speciesInfo.counts[c])):r[c]={min:a.speciesInfo.counts[c],max:a.speciesInfo.counts[c]},a.speciesInfo.counts[c]>a.speciesInfo.counts[b]?c:b},b[0]),d=y.getSpeciesArg(c);a.markerOpts.icon.fillColorIdx=d.colorIdx}),y.getSpeciesArgs().forEach(function(a){if(r[a.arg.species_id]){var b=q.filter(function(b){return a.colorIdx===b.markerOpts.icon.fillColorIdx}),c=a.arg.species_id,d=r[c].min,f=r[c].max;e.debug("observationCount variability for "+a.toString()+" ("+a.arg.common_name+") ["+d+"-"+f+"]");var g=x[a.colorIdx];g.domain([d,f]),b.forEach(function(a){a.markerOpts.icon.fillColor=g(a.speciesInfo.counts[c])})}})}else{var s=d3.min(q,function(a){return a.observationCount}),t=d3.max(q,function(a){return a.observationCount});e.debug("observationCount variability for network only results ["+s+"-"+t+"]"),x[0].domain([s,t]),q.forEach(function(a){a.markerOpts.icon.fillColorIdx=0,a.markerOpts.icon.fillColor=x[0](a.observationCount)})}return q.forEach(function(a){a.$markerKey=h.createHash(JSON.stringify(a))}),c.$broadcast("filter-phase2-end",{station:q.length,observation:g}),e.debug("phase2 time:",Date.now()-d),B=q}function o(){var d=a.defer(),f=l();if(!z&&f&&s!=y.getUpdateCount()){s=y.getUpdateCount();var g=Date.now();e.debug("execute",s,f),c.$broadcast("filter-phase1-start",{}),b.get("/npn_portal/observations/getAllObservationsForSpecies.json",{params:f}).success(function(a){angular.forEach(a.station_list,function(a){a.markerOpts={title:a.station_name,icon:angular.extend({},A)}}),c.$broadcast("filter-phase1-end",{count:a.station_list.length}),e.debug("phase1 time:",Date.now()-g),d.resolve(n(t=a.station_list))})}else d.resolve(B);return d.promise}function p(){z||c.$broadcast("filter-update",{})}function q(){B=[],c.$broadcast("filter-reset",{})}function r(){y.getSpeciesArgs().forEach(function(a,b){a.colorIdx=b,a.color=w(b)})}var s,t,u=["#1f77b4","#ff7f0e","#2ca02c","#d62728","#222299","#c51b8a","#8c564b","#637939","#843c39","#5254a3","#636363","#bcbd22","#7b4173","#e7ba52","#222299","#f03b20","#1b9e77","#e377c2","#ef8a62","#91cf60","#9467bd"],v=d3.range(0,u.length),w=d3.scale.ordinal().domain(v).range(v.map(function(a){return d3.rgb(u[a]).darker(1).toString()})),x=v.map(function(a){var b=w(a),c=d3.rgb(b).brighter(4).toString();return d3.scale.linear().range([c,b])}),y=new i,z=!1,A={fillColor:"#00ff00",fillOpacity:1,scale:8,strokeColor:"#204d74",strokeWeight:1},B=[];g.then(function(a){A.path=a.SymbolPath.CIRCLE}),c.$on("filter-rerun-phase2",function(){z||d(function(){if(t){var a=n(t,!0);c.$broadcast("filter-marker-updates",{markers:a})}},500)});var C={previousFilterCount:0,previousFilterMap:{},hits:[],misses:[]};return{execute:o,getFilteredMarkers:function(){return B},pause:function(){e.debug("PAUSE"),z=!0},resume:function(){e.debug("RESUME"),z=!1,p()},getFilter:function(){return y},hasFilterChanged:function(){return s!==y.getUpdateCount()},isFilterEmpty:function(){return!y.hasCriteria()},hasDate:function(){return y.hasDate()},hasSufficientCriteria:function(){return y.hasSufficientCriteria()},addToFilter:function(a){y.add(a)&&(r(),p())},removeFromFilter:function(a){y.remove(a)&&(y.hasCriteria()?p():q())},resetFilter:function(){y.reset(),q()},getColorScale:function(){return w},getChoroplethScale:function(a){var b=y.getSpeciesArg(a);return b?x[b.colorIdx]:void 0},getChoroplethScales:function(){return x}}}]).directive("npnFilterResults",["$rootScope","$http","$timeout","$filter","$log","FilterService","SettingsService","StationService","ClusterService",function(a,b,c,d,e,f,g,h,i){return{restrict:"E",template:'<ui-gmap-markers models="results.markers" idKey="\'$markerKey\'" coords="\'self\'" icon="\'icon\'" options="\'markerOpts\'" doCluster="doCluster" clusterOptions="clusterOptions" control="mapControl" events="markerEvents"></ui-gmap-markers>',scope:{},controller:function(b){function e(a){var c,d=a.reduce(function(a,b){return a+b.observationCount},0),e=d>512?Math.round(d/2):512;for(c=l.styles.length-1;c>=0;c--)l.styles[c].n=e,e=Math.round(e/2);b.results.markers=a}function j(){f.hasFilterChanged()&&f.hasSufficientCriteria()&&c(function(){b.results.markers=[],c(function(){f.execute().then(function(a){e(a)})},500)},500)}var k=!1;b.results={markers:[]},b.mapControl={},b.doCluster=g.getSettingValue("clusterMarkers");var l=i.getDefaultClusterOptions(),m=d("speciesBadge");b.clusterOptions=angular.extend(l,{calculator:function(a){var b=0,c=(g.getSettingValue("tagBadgeFormat"),{index:1});a.values().forEach(function(a){b+=a.model.observationCount}),c.text=m({station:a.length,observation:b},g.getSettingValue("tagBadgeFormat"));for(var d=0;d<l.styles.length;d++)b>=l.styles[d].n&&(c.index=d+1);return c}}),b.$on("setting-update-tagBadgeFormat",function(){b.mapControl&&b.mapControl.managerDraw&&b.mapControl.managerDraw()}),b.$on("setting-update-clusterMarkers",function(a,c){b.doCluster=c.value}),b.$on("tool-open",function(a,b){k="filter"===b.tool.id}),b.$on("tool-close",function(a,b){"filter"===b.tool.id&&(k=!1,j())}),b.$on("filter-update",function(){k||j()}),b.$on("filter-reset",function(){b.results.markers=[]}),b.$on("filter-marker-updates",function(a,b){e(b.markers)});var n=h.getMarkerEvents();b.markerEvents={click:n.click,mouseover:function(b){a.$broadcast("marker-mouseover",{marker:b})},mouseout:function(b){a.$broadcast("marker-mouseout",{marker:b})}}}}}]).directive("choroplethInfo",["$log","$timeout","FilterService",function(a,b,c){return{restrict:"E",templateUrl:"js/filter/choroplethInfo.html",controller:function(d){function e(a){var b,c,d=Math.ceil(a.domain[1]/20),e=[];for(b=0;20>b;b++)c=d*b+1,e[b]=a.scale(c),a.count>=c&&(a.color=e[b]);return e.forEach(function(b){-1===a.colors.indexOf(b)&&a.colors.push(b)}),a}var f=!1;d.show=!1,d.$on("marker-mouseover",function(g,h){a.debug("mouseover",h),(h.marker.model.speciesInfo||h.marker.model.observationCount)&&(f=!0,b(function(){if(d.show=f){d.station_name=h.marker.model.station_name;var b=c.getChoroplethScales();if(h.marker.model.speciesInfo){var g=Object.keys(h.marker.model.speciesInfo.counts);d.data=g.map(function(a){var d=c.getFilter().getSpeciesArg(a),f={sid:a,count:h.marker.model.speciesInfo.counts[a],title:h.marker.model.speciesInfo.titles[a],arg:d,scale:b[d.colorIdx],domain:b[d.colorIdx].domain(),colors:[]};return e(f)})}else if(h.marker.model.observationCount){var i={count:h.marker.model.observationCount,title:"All Records",scale:b[0],domain:b[0].domain(),colors:[]};d.data=[e(i)]}a.debug(d.data)}},500))}),d.$on("marker-mouseout",function(c,e){a.debug("mouseout",e),f=!1,d.show&&b(function(){f||(d.show=!1,d.data=void 0)},500)})}}}]).directive("filterTags",["FilterService",function(a){return{restrict:"E",templateUrl:"js/filter/filterTags.html",scope:{},controller:function(b){b.getFilter=a.getFilter}}}]).filter("speciesBadge",function(){return function(a,b){return"observation-count"===b?a.observation:"station-count"===b?a.station:"station-observation-count"===b?a.station+"/"+a.observation:a}}).filter("speciesTitle",["SettingsService",function(a){return function(b,c){var d=c||a.getSettingValue("tagSpeciesTitle");if("common-name"===d){if(b.common_name){var e=b.common_name.toLowerCase();return e.substring(0,1).toUpperCase()+e.substring(1)}return b.common_name}return"scientific-name"===d?b.genus+" "+b.species:b}}]).directive("speciesFilterTag",["$rootScope","FilterService","SettingsService","SpeciesFilterArg",function(a,b,c){return{restrict:"E",require:"^filterTags",templateUrl:"js/filter/speciesFilterTag.html",scope:{arg:"="},controller:function(d){d.titleFormat=c.getSettingValue("tagSpeciesTitle"),d.$on("setting-update-tagSpeciesTitle",function(a,b){d.titleFormat=b.value}),d.badgeFormat=c.getSettingValue("tagBadgeFormat"),d.badgeTooltip=c.getSettingValueLabel("tagBadgeFormat"),d.$on("setting-update-tagBadgeFormat",function(a,b){d.badgeFormat=b.value,d.badgeTooltip=c.getSettingValueLabel("tagBadgeFormat")}),d.$on("filter-phase2-start",function(){d.arg.resetCounts(0)}),d.$on("filter-phase1-start",function(){d.arg.resetCounts("?")}),d.removeFromFilter=b.removeFromFilter,d.status={isopen:!1},d.hasCount=function(a){return a.count>0};var e;d.$watch("status.isopen",function(){if(d.status.isopen)e=d.arg.phenophases.map(function(a){return a.selected});else if(e)for(var b=0;b<e.length;b++)if(e[b]!=d.arg.phenophases[b].selected){a.$broadcast("filter-rerun-phase2",{});break}}),d.selectAll=function(a){angular.forEach(d.arg.phenophases,function(b){b.selected=a})}}}}]).directive("dateFilterTag",["FilterService","SettingsService",function(a,b){return{restrict:"E",require:"^filterTags",templateUrl:"js/filter/dateFilterTag.html",scope:{arg:"="},controller:function(c){c.badgeFormat=b.getSettingValue("tagBadgeFormat"),c.badgeTooltip=b.getSettingValueLabel("tagBadgeFormat"),c.$on("setting-update-tagBadgeFormat",function(a,d){c.badgeFormat=d.value,c.badgeTooltip=b.getSettingValueLabel("tagBadgeFormat")
}),c.removeFromFilter=a.removeFromFilter,c.counts={station:"?",observation:"?"},c.$on("filter-phase1-start",function(){c.counts.station=c.counts.observation="?"}),c.$on("filter-phase2-start",function(){c.counts.station=c.counts.observation=0}),c.$on("filter-phase2-end",function(a,b){c.counts=b})}}}]).directive("networkFilterTag",["FilterService","SettingsService",function(a,b){return{restrict:"E",require:"^filterTags",templateUrl:"js/filter/networkFilterTag.html",scope:{arg:"="},controller:function(c){c.badgeFormat=b.getSettingValue("tagBadgeFormat"),c.badgeTooltip=b.getSettingValueLabel("tagBadgeFormat"),c.$on("setting-update-tagBadgeFormat",function(a,d){c.badgeFormat=d.value,c.badgeTooltip=b.getSettingValueLabel("tagBadgeFormat")}),c.removeFromFilter=a.removeFromFilter,c.$on("filter-phase1-start",function(){c.arg.resetCounts("?")}),c.$on("filter-phase2-start",function(){c.arg.resetCounts(0)})}}}]).directive("filterControl",["$http","$filter","$timeout","FilterService","DateFilterArg","SpeciesFilterArg","NetworkFilterArg",function(a,b,c,d,e,f,g){return{restrict:"E",templateUrl:"js/filter/filterControl.html",controller:["$scope",function(h){function i(){var a={},b=0;angular.forEach([].concat(h.speciesInput.animals).concat(h.speciesInput.plants),function(c){a["group_ids["+b++ +"]"]=c.species_type_id}),b=0,angular.forEach(h.speciesInput.networks,function(c){a["network_id["+b++ +"]"]=c.network_id}),l=a,h.findSpeciesParamsEmpty=0===Object.keys(a).length,n=!0}h.addDateRangeToFilter=function(){d.addToFilter(new e(h.selected.date))},h.filterHasDate=d.hasDate,h.filterHasSufficientCriteria=d.hasSufficientCriteria;var j=(new Date).getYear()+1900,k=d3.range(1900,j+1);h.thisYear=j,h.validYears=k,h.selected={date:{start_date:j-1,end_date:j},species:[]},h.networksMaxedOut=function(){return d.getFilter().getNetworkArgs().length>=10},h.speciesMaxedOut=function(){return d.getFilter().getSpeciesArgs().length>=20},h.addNetworksToFilter=function(){angular.forEach(h.speciesInput.networks,function(a){h.networksMaxedOut()||d.addToFilter(new g(a))})},h.addSpeciesToFilter=function(){angular.forEach(h.selected.species,function(a){h.speciesMaxedOut()||d.addToFilter(new f(a))})},h.speciesInput={animals:[],plants:[],networks:[]},h.findSpeciesParamsEmpty=!0;var l,m,n=!0;h.$watch("speciesInput.animals",i),h.$watch("speciesInput.plants",i),h.$watch("speciesInput.networks",i),h.findSpecies=function(){n&&(n=!1,angular.forEach(h.selected.species,function(a){a.selected=!1}),h.selected.species=[],h.findSpeciesParamsEmpty&&m&&m.length?h.speciesList=m:(h.findingSpecies=!0,h.serverResults=a.get("/npn_portal/species/getSpeciesFilter.json",{params:l}).then(function(a){var d=[];angular.forEach(a.data,function(a){a.number_observations=parseInt(a.number_observations),a.display=b("speciesTitle")(a)+" ("+a.number_observations+")",d.push(a)});var e=h.speciesList=d.sort(function(a,b){return a.number_observations<b.number_observations?1:a.number_observations>b.number_observations?-1:0});return h.findSpeciesParamsEmpty&&(m=e),c(function(){h.findingSpecies=!1},250),e})))},h.$on("setting-update-tagSpeciesTitle",function(){c(function(){angular.forEach(h.speciesList,function(a){a.display=b("speciesTitle")(a)+" ("+a.number_observations+")"})},250)}),a.get("/npn_portal/networks/getPartnerNetworks.json?active_only=true").success(function(a){angular.forEach(a,function(a){a.network_name=a.network_name.trim()}),h.partners=a}),a.get("/npn_portal/species/getPlantTypes.json").success(function(a){h.plantTypes=a}),a.get("/npn_portal/species/getAnimalTypes.json").success(function(a){h.animalTypes=a}),h.findSpecies()}]}}]),angular.module("npn-viz-tool.filters",[]).filter("cssClassify",function(){return function(a){return"string"==typeof a?a.trim().toLowerCase().replace(/\s+/g,"-"):a}}).filter("yesNo",function(){return function(a){return a?"Yes":"No"}}).filter("gte",function(){return function(a,b){return b&&angular.isArray(a)?a.filter(function(a){return a>=b}):a}}).filter("lte",function(){return function(a,b){return b&&angular.isArray(a)?a.filter(function(a){return b>=a}):a}}).filter("trim",function(){return function(a){return angular.isString(a)?a.trim():a}}).filter("ellipses",function(){return function(a){var b=2==arguments.length?arguments[1]:55;return"string"==typeof a&&a.length>b?a.substring(0,b)+" ...":a}}),angular.module("npn-viz-tool.layers",["npn-viz-tool.filter","ngResource"]).factory("LayerService",["$rootScope","$http","$q","$log","uiGmapIsReady",function(a,b,c,d,e){function f(a){if(!a.properties.CENTER){var b,c,d,e,f,g,h=a.geometry,i="Polygon"===h.type?h.coordinates[0]:h.coordinates.reduce(function(a,b){return a.concat(b[0])},[]);for(b=0;b<i.length;b++)c=i[b],0===b?(f=g=c[0],d=e=c[1]):(f=Math.max(f,c[0]),g=Math.min(g,c[0]),d=Math.max(d,c[1]),e=Math.min(e,c[1]));a.properties.CENTER={latitude:e+(d-e)/2,longitude:g+(f-g)/2}}}function g(e){var g=c.defer();return e.data?g.resolve(e):(a.$broadcast("layer-load-start",{}),b.get("layers/"+e.file).success(function(b){"GeometryCollection"===b.type?(d.debug("Translating GeometryCollection to FeatureCollection"),b.features=[],angular.forEach(b.geometries,function(a,c){b.features.push({type:"Feature",properties:{NAME:""+c},geometry:a})}),b.type="FeatureCollection",delete b.geometries):b.features.forEach(function(a,b){a.properties||(a.properties={}),a.properties.NAME||(a.properties.NAME=""+b)}),b.features.forEach(f),e.data=b,g.resolve(e),a.$broadcast("layer-load-end",{})})),g.promise}function h(){k.data.setStyle(function(a){var b=a.getProperty("$style");return b&&"function"==typeof b?b(a):b?angular.extend(m,b):m})}function i(a){if(a.loaded){for(var b=[],c=0;c<a.loaded.length;c++)a.loaded[c].removeProperty("$style"),k.data.remove(a.loaded[c]),b.push(a.loaded[c]);return delete a.loaded,b}}var j=null,k=null,l=e.promise(1).then(function(a){return k=a[0].map,d.debug("LayerService - map is ready"),b.get("layers/layers.json").success(function(a){j={},a.forEach(function(a,b){a.index=b,j[a.id]=a}),d.debug("LayerService - layer list is loaded",j)})}),m={strokeColor:"#ffffff",strokeOpacity:null,strokeWeight:1,fillColor:"#c0c5b8",fillOpacity:null,zIndex:0};return{getAvailableLayers:function(){var a=c.defer();return l.then(function(){var b,c,d=[];for(b in j)c=j[b],d.push({id:c.id,index:c.index,label:c.label,source:c.source,img:c.img,link:c.link});a.resolve(d.sort(function(a,b){return a.idx-b.idx}))}),a.promise},restyleLayers:function(){var a=c.defer();return l.then(function(){h(),a.resolve()}),a.promise},resetLayers:function(){var a=c.defer();return l.then(function(){for(var b in j)i(j[b]);a.resolve()}),a.promise},loadLayer:function(a,b){var e=c.defer();return l.then(function(){var c=j[a];return c?void g(c).then(function(){c.style=b,c.loaded=k.data.addGeoJson(c.data),c.loaded.forEach(function(a){a.setProperty("$style",b)}),h(),e.resolve([k,c.loaded])}):(d.debug("no such layer with id",a),e.reject(a))}),e.promise},unloadLayer:function(a){var b=c.defer();return l.then(function(){var c=j[a];if(!c)return d.debug("no such layer with id",a),b.reject(a);var e=i(c);b.resolve(e)}),b.promise}}}]).directive("layerControl",["$rootScope","$q","$location","$log","LayerService","FilterService","GeoFilterArg",function(a,b,c,d,e,f,g){return{restrict:"E",templateUrl:"js/layers/layerControl.html",controller:function(h){function i(){h.layerOnMap={layer:"none"}}function j(){e.restyleLayers().then(function(){f.getFilter().hasSufficientCriteria()&&a.$broadcast("filter-rerun-phase2",{})})}function k(a,b){var c=a.getProperty("$FILTER");n=a,c||(c=new g(a,h.layerOnMap.layer.id),f.addToFilter(c),b.data.overrideStyle(a,{fillColor:"#800000"}),a.setProperty("$FILTER",c),j())}function l(a){var b=a.getProperty("$FILTER");n=a,b&&(f.removeFromFilter(b),a.setProperty("$FILTER",null),j())}function m(a){var c=b.defer();return"none"===a?c.resolve(null):(e.loadLayer(a.id,function(a){var b={strokeOpacity:1,strokeColor:"#ffffff",strokeWeight:1,fillOpacity:0};return a.getProperty("$FILTER")&&(b.fillColor="#800000",b.fillOpacity=.5),b}).then(function(a){if(!o.length){var b=a[0];h.$on("filter-phase2-end",function(){if(n){var a=n.getProperty("CENTER");b.panTo(new google.maps.LatLng(a.latitude,a.longitude)),n=null}}),o.push(b.data.addListener("mouseover",function(a){b.data.overrideStyle(a.feature,{strokeWeight:3})})),o.push(b.data.addListener("mouseout",function(){b.data.revertStyle()})),o.push(b.data.addListener("click",function(a){h.$apply(function(){k(a.feature,b)})})),o.push(b.data.addListener("rightclick",function(a){h.$apply(function(){l(a.feature,b)})}))}c.resolve(a)}),c.promise)}var n,o=[];i(),h.$on("filter-reset",i),e.getAvailableLayers().then(function(b){function e(){a.$broadcast("layers-ready",{})}d.debug("av.layers",b),h.layers=b;var f=c.search();if(f.g){d.debug("init layers from query arg",f.g);var g,i,j=f.g.split(";"),l=j.map(function(a){return a.substring(a.indexOf(":")+1)}),n=j[0].substring(0,j[0].indexOf(":"));for(i=0;i<b.length;i++)if(b[i].id===n){g=b[i];break}g&&m(g).then(function(a){var b=a[0],c=a[1];h.layerOnMap.skipLoad=!0,h.layerOnMap.layer=g,c.forEach(function(a){-1!=l.indexOf(a.getProperty("NAME"))&&k(a,b)}),e()})}else e()}),h.$watch("layerOnMap.layer",function(b,c){return h.layerOnMap.skipLoad?void(h.layerOnMap.skipLoad=!1):void(c&&"none"!=c?e.unloadLayer(c.id).then(function(c){var d=f.getFilter().getGeoArgs(),e=d.length>0;d.forEach(function(a){f.removeFromFilter(a)}),c.forEach(function(a){a.setProperty("$FILTER",null)}),e&&!f.isFilterEmpty()&&a.$broadcast("filter-rerun-phase2",{}),m(b)}):b&&m(b))}),h.$on("$destroy",function(){e.resetLayers(),o.forEach(function(a){a.remove()})})}}}]),angular.module("npn-viz-tool",["templates-npnvis","npn-viz-tool.map","uiGmapgoogle-maps","ui.bootstrap","ngAnimate"]).config(["uiGmapGoogleMapApiProvider","$logProvider",function(a,b){a.configure({v:"3.17",libraries:["geometry","drawing"]}),b.debugEnabled(window.location.hash&&window.location.hash.match(/^#\/debug/))}]),angular.module("npn-viz-tool.map",["npn-viz-tool.layers","npn-viz-tool.stations","npn-viz-tool.toolbar","npn-viz-tool.filter","npn-viz-tool.bounds","npn-viz-tool.settings","npn-viz-tool.vis","npn-viz-tool.share","npn-viz-tool.export","uiGmapgoogle-maps"]).directive("npnVizMap",["$location","$timeout","uiGmapGoogleMapApi","uiGmapIsReady","FilterService",function(a,b,c,d,e){return{restrict:"E",templateUrl:"js/map/map.html",scope:{},controller:["$scope",function(f){function g(){f.stationView=!1}function h(){j&&(j.panTo(new google.maps.LatLng(k.latitude,k.longitude)),j.setZoom(4)),f.stationView=!0}var i,j,k={latitude:38.8402805,longitude:-97.61142369999999},l=4;f.stationView=!1,c.then(function(a){i=a,f.map={center:k,zoom:l,options:{streetViewControl:!1,panControl:!1,zoomControl:!0,zoomControlOptions:{style:a.ZoomControlStyle.SMALL,position:a.ControlPosition.RIGHT_TOP}}}}),d.promise(1).then(function(b){j=b[0].map;var c=a.search(),d=c.d&&(c.s||c.n);f.stationView=!d;var e=new i.LatLngBounds(new google.maps.LatLng(0,-174),new google.maps.LatLng(75,-43)),g=j.getCenter();if(c.allowedBounds){var h=new i.Rectangle;h.setOptions({strokeColor:"#FFF",strokeOpacity:.8,strokeWeight:2,fillColor:"#FFF",fillOpacity:.35,map:j,bounds:e})}i.event.addListener(j,"center_changed",function(){return e.contains(j.getCenter())?void(g=j.getCenter()):void j.panTo(g)})}),f.$on("tool-open",function(a,b){"layers"===b.tool.id&&g()}),f.$on("filter-phase1-start",g),f.$on("filter-reset",h),f.reset=function(){f.stationView?(f.stationView=!1,b(h,500)):e.resetFilter()}}]}}]).directive("npnWorking",["uiGmapIsReady",function(a){return{restrict:"E",template:'<div id="npn-working" ng-show="working"><i class="fa fa-circle-o-notch fa-spin fa-5x"></i></div>',scope:{},controller:function(b){function c(){b.working=!0}function d(){b.working=!1}c(),a.promise(1).then(d),b.$on("filter-phase1-start",c),b.$on("filter-phase2-start",c),b.$on("filter-rerun-phase2",c),b.$on("filter-phase2-end",d),b.$on("layer-load-start",c),b.$on("layer-load-end",d)}}}]),angular.module("templates-npnvis",["js/calendar/calendar.html","js/filter/choroplethInfo.html","js/filter/dateFilterTag.html","js/filter/filterControl.html","js/filter/filterTags.html","js/filter/networkFilterTag.html","js/filter/speciesFilterTag.html","js/layers/layerControl.html","js/map/map.html","js/scatter/scatter.html","js/settings/settingsControl.html","js/toolbar/tool.html","js/toolbar/toolbar.html","js/vis/visControl.html","js/vis/visDialog.html"]),angular.module("js/calendar/calendar.html",[]).run(["$templateCache",function(a){a.put("js/calendar/calendar.html",'<vis-dialog title="Calendar" modal="modal">\n<form class="form-inline plot-criteria-form">\n    <div class="form-group">\n        <label for="yearsOneInput">Select up to two years</label>\n        <input id="yearsOneInput" type="number" class="form-control"\n               ng-model="selection.year"\n               typeahead="year for year in validYears | filter:$viewValue"\n               required placeholder="Year" />\n        <button class="btn btn-default" ng-click="addYear()" ng-disabled="!canAddYear()"><i class="fa fa-plus"></i></button>\n    </div>\n    <div class="form-group animated-show-hide">\n        <label for="speciesInput">Species phenophase combinations</label>\n        <select name="speciesInput" class="form-control" ng-model="selection.species" ng-options="(o|speciesTitle) for o in speciesList"></select>\n        <select name="phenophaseInput" class="form-control" ng-model="selection.phenophase" ng-options="o.phenophase_name for o in phenophaseList"></select>\n        <div class="btn-group" dropdown is-open="selection.color_isopen">\n          <button type="button" class="btn btn-default dropdown-toggle" dropdown-toggle style="background-color: {{colorRange[selection.color]}};">\n            &nbsp; <span class="caret"></span>\n          </button>\n          <ul class="dropdown-menu" role="menu">\n            <li ng-repeat="i in colors track by $index" style="background-color: {{colorRange[$index]}};"><a href ng-click="selection.color=$index;">&nbsp;</a></li>\n          </ul>\n        </div>\n        <button class="btn btn-default" ng-click="addToPlot()" ng-disabled="!canAddToPlot()"><i class="fa fa-plus"></i></button>\n    </div>\n</form>\n\n<div class="panel panel-default main-vis-panel" >\n    <div class="panel-body">\n        <center ng-if="error_message"><p class="text-danger">{{error_message}}</p></center>\n        <center>\n        <ul class="to-plot list-inline animated-show-hide" ng-if="toPlot.length || toPlotYears.length">\n            <li class="criteria" ng-repeat="y in toPlotYears">{{y}}\n                <a href ng-click="removeYear($index)"><i class="fa fa-times-circle-o"></i></a>\n            </li>\n            <li class="criteria" ng-repeat="tp in toPlot">{{tp|speciesTitle}}/{{tp.phenophase_name}} <i style="color: {{colorRange[tp.color]}};" class="fa fa-circle"></i>\n                <a href ng-click="removeFromPlot($index)"><i class="fa fa-times-circle-o"></i></a>\n            </li>\n            <li ng-if="!data && toPlotYears.length && toPlot.length"><button class="btn btn-primary" ng-click="visualize()">Visualize</button></li>\n        </ul>\n        <div id="vis-container">\n            <div id="vis-working" ng-show="working"><i class="fa fa-circle-o-notch fa-spin fa-5x"></i></div>\n            <svg class="chart"></svg>\n        </div>\n        </center>\n        <ul class="list-inline calendar-chart-controls" ng-if="data" style="float: right;">\n            <li>Label Size\n                <a href class="btn btn-default btn-xs" ng-click="incrFontSize()" ng-disabled="yAxisConfig.fontSize <= 0.5"><i class="fa fa-minus"></i></a>\n                <a href class="btn btn-default btn-xs" ng-click="decrFontSize()"><i class="fa fa-plus"></i></a>\n            </li>\n            <li>Label Position\n                <a href class="btn btn-default btn-xs" ng-click="yAxisConfig.labelOffset=(yAxisConfig.labelOffset-1)"><i class="fa fa-minus"></i></a>\n                <a href class="btn btn-default btn-xs" ng-click="yAxisConfig.labelOffset=(yAxisConfig.labelOffset+1)"><i class="fa fa-plus"></i></a>\n            </li>\n            <li>Band Size\n                <a href class="btn btn-default btn-xs" ng-click="incrBandPadding()" ng-disabled="yAxisConfig.bandPadding >= 0.95"><i class="fa fa-minus"></i></a>\n                <a href class="btn btn-default btn-xs" ng-click="decrBandPadding()" ng-disabled="yAxisConfig.bandPadding <= 0.05"><i class="fa fa-plus"></i></a>\n            </li>\n        </ul>\n    </div>\n</div>\n\n</vis-dialog>')}]),angular.module("js/filter/choroplethInfo.html",[]).run(["$templateCache",function(a){a.put("js/filter/choroplethInfo.html",'<div id="choroplethHelp" ng-show="show">\n    <h4>{{station_name}}</h4>\n    <h5>Record Densit{{data.length == 1 ? \'y\' : \'ies\'}}</h5>\n    <ul class="list-unstyled">\n        <li ng-repeat="scale in data">\n            <label>{{scale.title}} ({{scale.count}})</label>\n            <ul class="list-inline color-scale">\n                <li ng-repeat="color in scale.colors" style="background-color: {{color}};" class="{{scale.color === color ? \'selected\' :\'\'}}">\n                    <div ng-if="$first">{{scale.domain[0]}}</div>\n                    <div ng-if="$last">{{scale.domain[1]}}</div>\n                </li>\n            </ul>\n        </li>\n    </li>\n</div>')}]),angular.module("js/filter/dateFilterTag.html",[]).run(["$templateCache",function(a){a.put("js/filter/dateFilterTag.html",'<div class="btn-group filter-tag date">\n    <a class="btn btn-default">\n        <span popover-placement="bottom" popover-popup-delay="500" popover-append-to-body="true"\n              popover-trigger="mouseenter" popover="Indicates the span of time represented on the map">{{arg.arg.start_date}} - {{arg.arg.end_date}} </span>\n        <span class="badge"\n              popover-placement="bottom" popover-popup-delay="500" popover-append-to-body="true"\n              popover-trigger="mouseenter" popover="{{badgeTooltip}}">{{counts | speciesBadge:badgeFormat}}</span>\n    </a>\n    <a class="btn btn-default" ng-click="removeFromFilter(arg)">\n        <i class="fa fa-times-circle-o"></i>\n    </a>\n</div>')}]),angular.module("js/filter/filterControl.html",[]).run(["$templateCache",function(a){a.put("js/filter/filterControl.html",'<ul class="list-unstyled">\n    <li>\n        <label for="yearInputForm">Select up to ten (consecutive) years</label>\n        <form id="yearInputForm" name="yearInputForm">\n        <input id="start_date" type="number" class="form-control"\n               max="{{selected.date.end_date || thisYear}}"\n               ng-model="selected.date.start_date"\n               typeahead="year for year in validYears | lte:selected.date.end_date | filter:$viewValue"\n               required placeholder="From" /> - \n        <input id="end_date" type="number" class="form-control"\n                min="{{selected.date.start_date || 1900}}"\n                ng-model="selected.date.end_date"\n                typeahead="year for year in validYears | gte:selected.date.start_date | filter:$viewValue"\n                required placeholder="To" />\n        <button class="btn btn-default"\n                ng-disabled="yearInputForm.$invalid || ((selected.date.end_date - selected.date.start_date) > 10)"\n                ng-click="addDateRangeToFilter()"\n                popover-placement="right" popover-popup-delay="500" popover-append-to-body="true"\n                popover-trigger="mouseenter" popover="Add this filter to the map"><i class="fa fa-plus"></i></button>\n        </form>\n        <p ng-if="selected.date.start_date < 2008" class="disclaimer">\n            You have selected a starting year prior to 2008 when the contemprary phenology data begins.  Prior to 2008 there is\n            a much more limited set of historical data and a limited number of species (E.g. lilac and honeysuckle).\n        </p>\n    </li>\n    <li class="divider" ng-if="filterHasDate()"></li>\n    <li ng-if="filterHasDate()">\n        <label>Animal Types</label>\n        <div isteven-multi-select\n            max-labels="3"\n            input-model="animalTypes"\n            output-model="speciesInput.animals"\n            button-label="species_type"\n            item-label="species_type"\n            tick-property="selected"\n            orientation="horizontal"\n            helper-elements="all none reset filter"\n            on-close="findSpecies()"></div>\n    </li>\n    <li ng-if="filterHasDate()">\n        <label>Plant Types</label>\n        <div isteven-multi-select\n            max-labels="3"\n            input-model="plantTypes"\n            output-model="speciesInput.plants"\n            button-label="species_type"\n            item-label="species_type"\n            tick-property="selected"\n            orientation="horizontal"\n            helper-elements="all none reset filter"\n            on-close="findSpecies()"></div>\n    </li>\n    <li ng-if="filterHasDate()">\n        <label>Partners</label>\n        <div class="row">\n            <div class="col-xs-9">\n                <div isteven-multi-select\n                    max-labels="3"\n                    input-model="partners"\n                    output-model="speciesInput.networks"\n                    button-label="network_name"\n                    item-label="network_name"\n                    tick-property="selected"\n                    orientation="horizontal"\n                    helper-elements="none reset filter"\n                    on-close="findSpecies()"></div>\n            </div>\n            <div class="col-xs-3">\n                <button class="btn btn-default" ng-disabled="!speciesInput.networks.length || networksMaxedOut()" ng-click="addNetworksToFilter()"\n                        popover-placement="right" popover-popup-delay="500"\n                        popover-trigger="mouseenter" popover="Add this filter to the map" popover-append-to-body="true">\n                    <i class="fa fa-plus"></i>\n                </button>\n            </div>\n        </div>\n\n    </li>\n    <li ng-if="filterHasDate()">\n        <label for="species">Species</label>\n        <div class="row">\n            <div class="col-xs-9">\n                <div isteven-multi-select\n                    max-labels="3"\n                    input-model="speciesList"\n                    output-model="selected.species"\n                    button-label="display"\n                    item-label="display"\n                    tick-property="selected"\n                    orientation="horizontal"\n                    helper-elements="none reset filter"></div>\n            </div>\n            <div class="col-xs-3">\n                <button class="btn btn-default" ng-disabled="!selected.species.length || speciesMaxedOut()" ng-click="addSpeciesToFilter()"\n                        popover-placement="right" popover-popup-delay="500"\n                        popover-trigger="mouseenter" popover="Add this filter to the map" popover-append-to-body="true">\n                    <i class="fa" ng-class="{\'fa-refresh fa-spin\': findingSpecies, \'fa-plus\': !findingSpecies}"></i>\n                </button>\n            </div>\n        </div>\n    </li>\n    <li ng-if="filterHasDate()" style="text-align: right;">\n        <a class="btn btn-lg btn-primary" id="filter-placebo" href ng-click="$parent.$parent.close()" ng-disabled="!filterHasSufficientCriteria()">Execute Filter <i class="fa fa-search"></i></a>\n    </li>\n</ul>\n')}]),angular.module("js/filter/filterTags.html",[]).run(["$templateCache",function(a){a.put("js/filter/filterTags.html",'<ul class="list-inline filter-tags">\n    <li ng-repeat="s in getFilter().getSpeciesArgs()"><species-filter-tag arg="s"></species-filter-tag></li>\n    <li ng-repeat="n in getFilter().getNetworkArgs()"><network-filter-tag arg="n"></network-filter-tag></li>\n    <li ng-if="(date = getFilter().getDateArg())"><date-filter-tag arg="date"></date-filter-tag></li>\n</ul>')}]),angular.module("js/filter/networkFilterTag.html",[]).run(["$templateCache",function(a){a.put("js/filter/networkFilterTag.html",'<div class="btn-group filter-tag date">\n    <a class="btn btn-default">\n        <span popover-placement="bottom" popover-popup-delay="500" popover-append-to-body="true"\n              popover-trigger="mouseenter" popover="Indicates the span of time represented on the map">{{arg.arg.network_name}} </span>\n        <span class="badge"\n              popover-placement="bottom" popover-popup-delay="500" popover-append-to-body="true"\n              popover-trigger="mouseenter" popover="{{badgeTooltip}}">{{arg.counts | speciesBadge:badgeFormat}}</span>\n    </a>\n    <a class="btn btn-default" ng-click="removeFromFilter(arg)">\n        <i class="fa fa-times-circle-o"></i>\n    </a>\n</div>')}]),angular.module("js/filter/speciesFilterTag.html",[]).run(["$templateCache",function(a){a.put("js/filter/speciesFilterTag.html",'<div class="btn-group filter-tag" ng-class="{open: status.isopen}">\n    <a class="btn btn-primary" style="background-color: {{arg.color}};" ng-disabled="!arg.phenophases" ng-click="status.isopen = !status.isopen">\n        {{arg.arg | speciesTitle:titleFormat}} \n        <span class="badge"\n              popover-placement="bottom" popover-popup-delay="500" popover-append-to-body="true"\n              popover-trigger="mouseenter" popover="{{badgeTooltip}}">{{arg.counts | speciesBadge:badgeFormat}}</span> \n        <span class="caret"></span>\n    </a>\n    <ul class="dropdown-menu phenophase-list" role="menu">\n        <li class="inline">Select <a href ng-click="selectAll(true)">all</a> <a href ng-click="selectAll(false)">none</a></li>\n        <li class="divider"></li>\n        <li ng-repeat="phenophase in arg.phenophases | filter:hasCount">\n            <input type="checkbox" ng-model="phenophase.selected"> <span class="badge">{{phenophase.count}}</span> {{phenophase.phenophase_name}}\n        </li>\n    </ul>\n    <a class="btn btn-primary" style="background-color: {{arg.color}};" ng-click="removeFromFilter(arg)">\n        <i class="fa fa-times-circle-o"></i>\n    </a>\n</div>')}]),angular.module("js/layers/layerControl.html",[]).run(["$templateCache",function(a){a.put("js/layers/layerControl.html",'<ul class="list-unstyled">\n    <li><input type="radio" id="layer-none" ng-model="layerOnMap.layer" value="none"/> <label for="layer-none">None</label></li>\n    <li ng-repeat="layer in layers">\n        <input type="radio" id="layer-{{layer.id}}" ng-model="layerOnMap.layer" ng-value="layer"/> <label for="layer-{{layer.id}}">{{layer.label}}</label>\n        <span ng-if="layer.source">(<a href="{{layer.source}}" target="_blank">Source</a>)</span>\n        <span ng-if="layer.img">\n            <a ng-if="layer.link" href="{{layer.link}}" target="_blank"><img ng-src="{{layer.img}}" /></a>\n            <img ng-if="!layer.link" ng-src="{{layer.img}}" />\n        </span>\n    </li>\n</ul>')}]),angular.module("js/map/map.html",[]).run(["$templateCache",function(a){a.put("js/map/map.html",'<a title="Reset" href id="reset-control" class="btn btn-default btn-xs" ng-click="reset()"><i class="fa fa-refresh"></i></a>\n\n<npn-working></npn-working>\n\n<ui-gmap-google-map ng-if="map" center=\'map.center\' zoom=\'map.zoom\' options="map.options">\n    <npn-stations ng-if="stationView"></npn-stations>\n    <npn-filter-results></npn-filter-results>\n    <bounds-manager></bounds-manager>\n</ui-gmap-google-map>\n\n<share-control></share-control>\n<export-control></export-control>\n<filter-tags></filter-tags>\n<choropleth-info></choropleth-info>\n\n<toolbar>\n    <tool id="filter" icon="fa-search" title="Filter">\n        <filter-control></filter-control>\n    </tool>\n    <tool id="layers" icon="fa-bars" title="Layers">\n        <layer-control></layer-control>\n    </tool>\n    <tool id="visualizations" icon="fa-bar-chart" title="Visualizations">\n        <vis-control></vis-control>\n    </tool>\n    <tool id="settings" icon="fa-cog" title="Settings">\n        <settings-control></settings-control>\n    </tool>\n</toolbar>')}]),angular.module("js/scatter/scatter.html",[]).run(["$templateCache",function(a){a.put("js/scatter/scatter.html",'<vis-dialog title="Scatter Plot" modal="modal">\n<form class="form-inline plot-criteria-form">\n    <div class="form-group">\n        <label for="speciesInput">Select up to three species phenophase combinations</label>\n        <select name="speciesInput" class="form-control" ng-model="selection.species" ng-options="(o|speciesTitle) for o in speciesList"></select>\n        <select name="phenophaseInput" class="form-control" ng-model="selection.phenophase" ng-options="o.phenophase_name for o in phenophaseList"></select>\n        <div class="btn-group" dropdown is-open="selection.color_isopen">\n          <button type="button" class="btn btn-default dropdown-toggle" dropdown-toggle style="background-color: {{colorRange[selection.color]}};">\n            &nbsp; <span class="caret"></span>\n          </button>\n          <ul class="dropdown-menu" role="menu">\n            <li ng-repeat="i in colors track by $index" style="background-color: {{colorRange[$index]}};"><a href ng-click="selection.color=$index;">&nbsp;</a></li>\n          </ul>\n        </div>\n    </div>\n    <button class="btn btn-default" ng-click="addToPlot()" ng-disabled="!canAddToPlot()"><i class="fa fa-plus"></i></button>\n</form>\n\n<div class="panel panel-default main-vis-panel" >\n    <div class="panel-body">\n        <center>\n        <ul class="to-plot list-inline animated-show-hide" ng-if="toPlot.length">\n            <li class="criteria" ng-repeat="tp in toPlot">{{tp|speciesTitle}}/{{tp.phenophase_name}} <i style="color: {{colorRange[tp.color]}};" class="fa fa-circle"></i>\n                <a href ng-click="removeFromPlot($index)"><i class="fa fa-times-circle-o"></i></a>\n            </li>\n            <li>\n                <select class="form-control vis-axis" ng-model="selection.axis" ng-options="o as o.label for o in axis"></select>\n            </li>\n            <li>\n                <label for="fitLinesInput">Fit Line{{toPlot.length > 1 ? \'s\' : \'\'}}</label>\n                <input type="checkbox" id="fitLinesInput" ng-model="selection.regressionLines" />\n            </li>\n            <li ng-if="!data"><button class="btn btn-primary" ng-click="visualize()">Visualize</button></li>\n        </ul>\n        <div id="vis-container">\n            <div id="vis-working" ng-show="working"><i class="fa fa-circle-o-notch fa-spin fa-5x"></i></div>\n            <svg class="chart"></svg>\n            <div ng-if="filteredDisclaimer" class="filter-disclaimer">For quality assurance purposes, only onset dates that are preceded by negative recordss are included in the visualization.</div>\n        </div>\n        </center>\n    </div>\n</div>\n<!--pre ng-if="record">{{record | json}}</pre-->\n\n</vis-dialog>')}]),angular.module("js/settings/settingsControl.html",[]).run(["$templateCache",function(a){a.put("js/settings/settingsControl.html",'<ul class="list-unstyled">\n    <li>\n        <Label for="clusterMarkersSetting">Cluster Markers</label>\n        <ul class="list-unstyled">\n            <li ng-repeat="option in [true,false]">\n                <input type="radio" id="clusterMarkers{{option}}" ng-model="settings.clusterMarkers.value"\n                       ng-value="{{option}}" /> <label for="clusterMarkers{{option}}">{{option | yesNo}}</label>\n            </li>\n        </ul>\n    </li>\n    <li class="divider"></li>\n    <li>\n        <label>Variable(s) Displayed</label>\n        <ul class="list-unstyled">\n            <li ng-repeat="option in settings.tagBadgeFormat.options">\n                <input type="radio"\n                       id="{{option.value}}" ng-model="settings.tagBadgeFormat.value"\n                       value="{{option.value}}"> <label for="{{option.value}}">{{option.label}}</label>\n            </li>\n        </ul>\n    </li>\n    <li class="divider"></li>\n    <li>\n        <label>Species Tag Title</label>\n        <ul class="list-unstyled">\n            <li ng-repeat="option in settings.tagSpeciesTitle.options">\n                <input type="radio"\n                       id="{{option.value}}" ng-model="settings.tagSpeciesTitle.value"\n                       value="{{option.value}}"> <label for="{{option.value}}">{{option.label}}</label>\n            </li>\n        </ul>\n    </li>\n    <li class="divider"></li>\n    <li>\n        <label for="clusterMarkersSetting">Exclude low quality data from visualizations</label>\n        <ul class="list-unstyled">\n            <li ng-repeat="option in [true,false]">\n                <input type="radio" id="filterLqdSummary{{option}}" ng-model="settings.filterLqdSummary.value"\n                       ng-value="{{option}}" /> <label for="filterLqdSummary{{option}}">{{option | yesNo}}</label>\n            </li>\n        </ul>\n        <p>A value of <strong>Yes</strong> will exclude data points which lack a "no" observation record preceding the first yes observation record to increase precision and certainty.</p>\n    </li>\n</ul>')
}]),angular.module("js/toolbar/tool.html",[]).run(["$templateCache",function(a){a.put("js/toolbar/tool.html",'<div class="tool-content {{title.toLowerCase()}}" ng-show="selected">\n    <h2>{{title}}</h2>\n    <div ng-transclude>\n    </div>\n</div>')}]),angular.module("js/toolbar/toolbar.html",[]).run(["$templateCache",function(a){a.put("js/toolbar/toolbar.html",'<div class="toolbar">\n  <ul class="tools-list">\n    <li ng-repeat="t in tools" ng-class="{open: t.selected}"\n        popover-placement="right" popover="{{t.title}}" popover-trigger="mouseenter" popover-popup-delay="1000"\n        ng-click="select(t)">\n      <i class="fa {{t.icon}}"></i>\n    </li>\n  </ul>\n  <div class="toolbar-content" ng-class="{open: open}" ng-transclude></div>\n</div>')}]),angular.module("js/vis/visControl.html",[]).run(["$templateCache",function(a){a.put("js/vis/visControl.html",'<p class="empty-filter-notes" ng-if="isFilterEmpty()">\n    Before using a visualization you must create and execute a filter.\n    Visualizations use the species, and sometimes, date ranges you\'ve identified\n    in your filter as the basis for what you want to visualize.\n</p>\n<ul class="list-unstyled">\n    <li ng-repeat="vis in visualizations">\n        <a href ng-click="open(vis)" ng-class="{disabled: isFilterEmpty()}">{{vis.title}}</a>\n        <p>{{vis.description}}</p>\n    </li>\n</ul>')}]),angular.module("js/vis/visDialog.html",[]).run(["$templateCache",function(a){a.put("js/vis/visDialog.html",'<div class="modal-header">\n    <a href class="modal-dismiss" ng-click="modal.dismiss()"><i class="fa fa-times-circle-o fa-2x"></i></a>\n    <h3 class="modal-title">{{title}}</h3>\n</div>\n<div class="modal-body vis-dialog {{title | cssClassify}}" ng-transclude>\n</div>')}]),angular.module("npn-viz-tool.vis-scatter",["npn-viz-tool.vis","npn-viz-tool.filter","npn-viz-tool.filters","npn-viz-tool.settings","ui.bootstrap"]).controller("ScatterVisCtrl",["$scope","$modalInstance","$http","$timeout","$filter","$log","FilterService","ChartService","SettingsService",function(a,b,c,d,e,f,g,h,i){function j(){a.selection.color<a.colors.length?a.selection.color++:a.selection.color=0}function k(){return angular.extend({},a.selection.species,a.selection.phenophase,{color:a.selection.color})}function l(){function b(b){return b[a.selection.axis.key]}if(n){a.working=!0;var c=1;t.domain([d3.min(n,b)-c,d3.max(n,b)+c]),u.scale(t).tickFormat(d3.format(".2f"));var d=o.selectAll("g .x.axis");d.call(u),d.selectAll(".axis-label").remove(),d.append("text").attr("class","axis-label").attr("x",s.width/2).attr("dy","3em").style("text-anchor","middle").style("font-size",".9em").text(a.selection.axis.label);var f=o.selectAll(".circle").data(n,function(a){return a.id});f.exit().remove(),f.enter().append("circle").attr("class","circle"),f.attr("cx",function(b){return t(b[a.selection.axis.key])}).attr("cy",function(a){return v(a.first_yes_doy)}).attr("r","5").attr("fill",function(a){return a.color}).on("click",function(b){d3.event.defaultPrevented||a.$apply(function(){a.record=b})}).append("title").text(function(a){return x(a.day_in_range)+" ["+a.latitude+","+a.longitude+"]"});var g=[],i=d3.format(".2f");angular.forEach(a.toPlot,function(b){var c=a.colorRange[b.color],d=n.filter(function(a){return a.color===c});if(d.length>0){var f=d.sort(function(b,c){return b[a.selection.axis.key]-c[a.selection.axis.key]}),j=f.map(function(b){return b[a.selection.axis.key]}),k=f.map(function(a){return a.first_yes_doy}),l=h.leastSquares(j,k),m=j[0],o=h.approxY(l,m),p=j[j.length-1],q=h.approxY(l,p);g.push({id:b.species_id+"."+b.phenophase_id,legend:e("speciesTitle")(b)+"/"+b.phenophase_name+(a.selection.regressionLines?" (R^2 = "+i(l[2])+")":""),color:c,p1:[m,o],p2:[p,q]})}});var j=o.selectAll(".regression").data(g,function(a){return a.id});j.exit().remove(),j.enter().append("line").attr("class","regression"),j.attr("data-legend",function(a){return a.legend}).attr("data-legend-color",function(a){return a.color}).attr("x1",function(a){return t(a.p1[0])}).attr("y1",function(a){return v(a.p1[1])}).attr("x2",function(a){return t(a.p2[0])}).attr("y2",function(a){return v(a.p2[1])}).attr("stroke",function(a){return a.color}).attr("stroke-width",a.selection.regressionLines?2:0),o.select(".legend").remove();{o.append("g").attr("class","legend").attr("transform","translate(30,-45)").style("font-size","1em").call(d3.legend)}a.selection.regressionLines&&o.selectAll(".legend text").html(function(a){return a.key.replace("R^2",'R<tspan style="baseline-shift: super; font-size: 8px;">2</tspan>')}),a.working=!1}}a.modal=b;var m=g.getColorScale();a.colors=m.domain(),a.colorRange=m.range(),a.axis=[{key:"latitude",label:"Latitude"},{key:"longitude",label:"Longitude"},{key:"elevation_in_meters",label:"Elevation (m)"}],a.selection={color:0,axis:a.axis[0],regressionLines:!1},a.$watch("selection.regressionLines",function(a,b){a!==b&&l()}),a.$watch("selection.axis",function(a,b){a!==b&&l()}),a.toPlot=[],g.getFilter().getSpeciesList().then(function(b){f.debug("speciesList",b),a.speciesList=b,b.length&&(a.selection.species=b[0])}),a.$watch("selection.species",function(){a.phenophaseList=[],a.selection.species&&g.getFilter().getPhenophasesForSpecies(a.selection.species.species_id).then(function(b){f.debug("phenophaseList",b),a.phenophaseList=b,b.length&&(a.selection.phenophase=b[0])})}),a.canAddToPlot=function(){if(3===a.toPlot.length||!a.selection.species||!a.selection.phenophase)return!1;if(0===a.toPlot.length)return!0;var b,c=k();for(b=0;b<a.toPlot.length;b++)if(angular.equals(a.toPlot[b],c))return!1;for(b=0;b<a.toPlot.length;b++)if(c.color===a.toPlot[b].color)return!1;return!0},a.addToPlot=function(){a.canAddToPlot()&&(a.toPlot.push(k()),j(),a.data=n=void 0)},a.removeFromPlot=function(b){a.toPlot.splice(b,1),a.data=n=void 0};var n,o,p=g.getFilter().getDateArg(),q=p.arg.start_date,r=new Date(q,0),s=(p.arg.end_date,h.getSizeInfo({top:80,left:60})),t=d3.scale.linear().range([0,s.width]).domain([0,100]),u=d3.svg.axis().scale(t).orient("bottom"),v=d3.scale.linear().range([s.height,0]).domain([1,365]),w=d3.time.format("%x"),x=function(a){var b=(a-1)*h.ONE_DAY_MILLIS+r.getTime(),c=new Date(b);return w(c)},y=d3.svg.axis().scale(v).orient("left");d(function(){o=d3.select(".chart").attr("width",s.width+s.margin.left+s.margin.right).attr("height",s.height+s.margin.top+s.margin.bottom).append("g").attr("transform","translate("+s.margin.left+","+s.margin.top+")"),o.append("g").attr("class","x axis").attr("transform","translate(0,"+s.height+")").call(u),o.append("g").attr("class","y axis").call(y).append("text").attr("transform","rotate(-90)").attr("y","0").attr("dy","-3em").attr("x",-1*(s.height/2)).style("text-anchor","middle").text("Onset DOY"),o.selectAll("g .x.axis text").style("font-size",".9em"),o.selectAll("g .y.axis text").style("font-size",".9em")},500),a.visualize=function(){if(n)return l();a.working=!0,f.debug("visualize",a.selection.axis,a.toPlot);var b=g.getFilter().getDateArg(),c={request_src:"npn-vis-scatter-plot",start_date:b.getStartDate(),end_date:b.getEndDate()},d=0,e={};angular.forEach(a.toPlot,function(a){e[a.species_id+"."+a.phenophase_id]=a.color,c["species_id["+d+"]"]=a.species_id,c["phenophase_id["+d++ +"]"]=a.phenophase_id}),h.getSummarizedData(c,function(b){var c=i.getSettingValue("filterLqdSummary");a.data=n=b.filter(function(b,d){var f=!c||b.numdays_since_prior_no>=0;return f&&(b.color=a.colorRange[e[b.species_id+"."+b.phenophase_id]],b.color?(b.id=d,b.day_in_range=365*(b.first_yes_year-q)+b.first_yes_doy):f=!1),f}),f.debug("filtered out "+(b.length-n.length)+"/"+b.length+" records with negative num_days_prior_no."),a.filteredDisclaimer=b.length!=n.length,f.debug("scatterPlot data",n),l()})}}]),angular.module("npn-viz-tool.settings",["npn-viz-tool.filters"]).factory("SettingsService",[function(){var a={clusterMarkers:{name:"cluster-markers",q:"cm",value:!0},tagSpeciesTitle:{name:"tag-species-title",q:"tst",value:"common-name",options:[{value:"common-name",q:"cn",label:"Common Name"},{value:"scientific-name",q:"sn",label:"Scientific Name"}]},tagBadgeFormat:{name:"tag-badge-format",q:"tbf",value:"observation-count",options:[{value:"observation-count",q:"oc",label:"Record Count"},{value:"station-count",q:"sc",label:"Station Count"}]},filterLqdSummary:{name:"filter-lqd-summary",q:"flqdf",value:!0}};return{getSettings:function(){return a},getSetting:function(b){return a[b]},getSettingValue:function(b){return a[b].value},getSettingValueLabel:function(b){var c,d=a[b],e=d.value;for(c=0;d.options&&c<d.options.length;c++)if(d.options[c].value===e)return d.options[c].label},getSharingUrlArgs:function(){var b,c,d,e="";for(b in a)if(c=a[b],e+=(""!==e?";":"")+c.q+"=",c.options){for(d=0;d<c.options.length;d++)if(c.value===c.options[d].value){e+=c.options[d].q;break}}else e+=c.value;return"ss="+encodeURIComponent(e)},populateFromSharingUrlArgs:function(b){b&&b.split(";").forEach(function(b){var c,d,e=b.split("="),f=e[0],g=e[1];for(c in a)if(a[c].q===f){if(a[c].options){for(d=0;d<a[c].options.length;d++)if(a[c].options[d].q===g){a[c].value=a[c].options[d].value;break}}else a[c].value="true"===g||"false"===g?"true"===g:g;break}})}}}]).directive("settingsControl",["$rootScope","$location","$log","SettingsService",function(a,b,c,d){return{restrict:"E",templateUrl:"js/settings/settingsControl.html",controller:function(e){function f(b){c.debug("broadcastSettingChange",e.settings[b]),a.$broadcast("setting-update-"+b,e.settings[b])}function g(a){e.$watch("settings."+a+".value",function(){f(a)})}d.populateFromSharingUrlArgs(b.search().ss),e.settings=d.getSettings();for(var h in e.settings)g(h)}}}]),angular.module("npn-viz-tool.share",["npn-viz-tool.filter","npn-viz-tool.layers","npn-viz-tool.settings","uiGmapgoogle-maps"]).directive("shareControl",["uiGmapIsReady","FilterService","LayerService","DateFilterArg","SpeciesFilterArg","NetworkFilterArg","GeoFilterArg","BoundsFilterArg","$location","$log","SettingsService",function(a,b,c,d,e,f,g,h,i,j,k){return{restrict:"E",template:'<a title="Share" href id="share-control" class="btn btn-default btn-xs" ng-disabled="!getFilter().hasSufficientCriteria()" ng-click="share()"><i class="fa fa-share"></i></a><div ng-show="url" id="share-content"><input type="text" class="form-control" ng-model="url" ng-blur="url = null" onClick="this.setSelectionRange(0, this.value.length)"/></div>',scope:{},controller:function(c){b.pause(),a.promise(1).then(function(a){function g(){v&&s===r&&t===u&&(j.debug("ready.."),m(),n(),o(),b.resume())}function k(a){e.fromString(a).then(b.addToFilter)}function l(a){f.fromString(a).then(b.addToFilter)}var m,n,o,p=a[0],q=i.search(),r=0,s=0,t=0,u=0,v=!1;if(m=c.$on("layers-ready",function(){j.debug("layers ready..."),v=!0,g()}),n=c.$on("species-filter-ready",function(a,b){j.debug("species filter ready...",b),s++,g()}),o=c.$on("network-filter-ready",function(a,b){j.debug("network filter ready...",b),u++,g()}),j.debug("qargs",q),q.d&&(q.s||q.n)){if(b.addToFilter(d.fromString(q.d)),q.b&&q.b.split(";").forEach(function(a){b.addToFilter(h.fromString(a,p.map))}),q.s){var w=q.s.split(";");r=w.length,w.forEach(k)}if(q.n){var x=q.n.split(";");t=x.length,x.forEach(l)}}else b.resume()}),c.getFilter=b.getFilter,c.share=function(){if(c.url)return void(c.url=null);var a=b.getFilter(),d={},e=i.absUrl(),f=e.indexOf("?");d.d=a.getDateArg().toString(),a.getSpeciesArgs().forEach(function(a){d.s?d.s+=";"+a.toString():d.s=a.toString()}),a.getNetworkArgs().forEach(function(a){d.n?d.n+=";"+a.toString():d.n=a.toString()}),a.getGeoArgs().forEach(function(a){d.g?d.g+=";"+a.toString():d.g=a.toString()}),a.getBoundsArgs().forEach(function(a){d.b?d.b+=";"+a.toString():d.b=a.toString()}),-1!=f&&(e=e.substring(0,f)),e+=-1===e.indexOf("#")?"#?":"?",Object.keys(d).forEach(function(a,b){e+=(b>0?"&":"")+a+"="+encodeURIComponent(d[a])}),e+="&"+k.getSharingUrlArgs(),j.debug("absUrl",e),c.url=e}}}}]),angular.module("npn-viz-tool.stations",["npn-viz-tool.filter","npn-viz-tool.cluster","npn-viz-tool.settings","npn-viz-tool.layers"]).factory("StationService",["$http","$log","FilterService",function(a,b,c){var d={click:function(d){b.debug("Fetching info for station "+d.model.station_id),a.get("/npn_portal/stations/getStationDetails.json",{params:{ids:d.model.station_id}}).success(function(a){function e(a,b){return b&&""!==b?"<li><label>"+a+":</label> "+b+"</li>":""}if(a&&1===a.length){var f,g=a[0],h='<div class="station-details">';b.debug(g),h+='<ul class="list-unstyled">',h+=e("Site Name",g.site_name),h+=e("Group",g.group_name),d.model.observationCount?h+=e("Records",d.model.observationCount):(h+=e("Individuals",g.num_individuals),h+=e("Records",g.num_records)),h+="</ul>",d.model.speciesInfo&&(h+="<label>Species Observed</label>",h+='<ul class="list-unstyled">',Object.keys(d.model.speciesInfo.titles).forEach(function(a){var b=c.getChoroplethScale(a),e=d.model.speciesInfo.counts[a];h+='<li><div class="choropleth-swatch" style="background-color: '+b(e)+';"></div>'+d.model.speciesInfo.titles[a]+" ("+e+")</li>"}),h+="</ul>"),h+="</div>",f=new google.maps.InfoWindow({maxWidth:500,content:h}),f.open(d.map,d)}})}},e={getMarkerEvents:function(){return d}};return e}]).directive("npnStations",["$http","$log","LayerService","SettingsService","StationService","ClusterService",function(a,b,c,d,e,f){return{restrict:"E",template:'<ui-gmap-markers models="regions.markers" idKey="\'name\'" coords="\'self\'" icon="\'icon\'" options="\'markerOpts\'" isLabel="true"></ui-gmap-markers><ui-gmap-markers models="stations.markers" idKey="\'station_id\'" coords="\'self\'" icon="\'icon\'" options="\'markerOpts\'" doCluster="doCluster" events="markerEvents" clusterOptions="clusterOptions"></ui-gmap-markers>',scope:{},controller:["$scope",function(g){g.doCluster=d.getSettingValue("clusterMarkers"),g.$on("setting-update-clusterMarkers",function(a,b){g.doCluster=b.value});var h=f.getDefaultClusterOptions();g.clusterOptions=angular.extend(h,{calculator:function(a){for(var b={text:a.length,index:1},c=0;c<h.styles.length;c++)a.length>=h.styles[c].n&&(b.index=c+1);return b}}),g.regions={markers:[]},g.stations={states:[],markers:[]},g.markerEvents=e.getMarkerEvents();var i=[];a.get("/npn_portal/stations/getStationCountByState.json").success(function(d){var e=d.reduce(function(a,b){return a[b.state]=b,b.number_stations=parseInt(b.number_stations),a.$min=Math.min(a.$min,b.number_stations),a.$max=Math.max(a.$max,b.number_stations),a},{$max:0,$min:0}),f=d3.scale.linear().domain([e.$min,e.$max]).range(["#F7FBFF","#08306B"]);c.resetLayers().then(function(){c.loadLayer("primary",function(a){var c=a.getProperty("NAME"),d=-1!=g.stations.states.indexOf(c),h=e[c],i={strokeOpacity:1,strokeColor:"#ffffff",strokeWeight:1,fillOpacity:0};if(h&&!d){h.visited=!0,i.fillOpacity=.8,i.fillColor=f(h.number_stations),i.clickable=!0;var j=a.getProperty("CENTER"),k=angular.extend({name:c,icon:{path:google.maps.SymbolPath.CIRCLE,fillColor:"#000",fillOpacity:.5,scale:16,strokeColor:"#ccc",strokeWeight:1},markerOpts:{title:c,labelClass:"station-count",labelContent:""+h.number_stations}},j);h.number_stations<10?(k.icon.scale=8,k.markerOpts.labelAnchor="4 8"):h.number_stations<100?(k.icon.scale=12,k.markerOpts.labelAnchor="8 8"):h.number_stations<1e3?(k.icon.scale=14,k.markerOpts.labelAnchor="10 8"):k.markerOpts.labelAnchor="13 8",g.$apply(function(){g.regions.markers.push(k)})}else d||b.warn("no station count for "+c);return i}).then(function(b){var c=b[0];i.push(c.data.addListener("mouseover",function(a){c.data.overrideStyle(a.feature,{strokeWeight:3})})),i.push(c.data.addListener("mouseout",function(){c.data.revertStyle()})),i.push(c.data.addListener("click",function(b){var d=b.feature.getProperty("NAME");-1===g.stations.states.indexOf(d)&&(g.stations.states.push(d),c.panTo(b.latLng),c.setZoom(6),a.get("/npn_portal/stations/getAllStations.json",{params:{state_code:d}}).success(function(a){a.forEach(function(a){a.markerOpts={title:a.station_name,icon:{path:google.maps.SymbolPath.CIRCLE,fillColor:"#e6550d",fillOpacity:1,scale:8,strokeColor:"#204d74",strokeWeight:1}}});var e,f=g.stations.markers.concat(a),i=f.length>512?Math.round(f.length/2):512;for(e=h.styles.length-1;e>=0;e--)h.styles[e].n=i,i=Math.round(i/2);g.stations.markers=f,c.data.remove(b.feature);var j=[];for(e=0;e<g.regions.markers.length;e++)g.regions.markers[e].name!==d&&j.push(g.regions.markers[e]);g.regions.markers=j}))}))})})}),g.$on("$destroy",function(){c.resetLayers(),i.forEach(function(a){a.remove()})})}]}}]),angular.module("npn-viz-tool.toolbar",[]).directive("toolbar",["$rootScope",function(a){return{restrict:"E",templateUrl:"js/toolbar/toolbar.html",transclude:!0,scope:{},controller:function(b){function c(b){a.$broadcast("tool-"+(b.selected?"open":"close"),{tool:b})}var d=b.tools=[];b.select=function(a){a.selected=!a.selected,b.open=a.selected,c(a)},this.addTool=function(a){d.push(a)},this.closeTool=function(a){b.open=a.selected=!1,c(a)}}}}]).directive("tool",[function(){return{restrict:"E",require:"^toolbar",templateUrl:"js/toolbar/tool.html",transclude:!0,scope:{id:"@",title:"@",icon:"@"},link:function(a,b,c,d){d.addTool(a),a.close=function(){d.closeTool(a)}}}}]),angular.module("npn-viz-tool.vis",["npn-viz-tool.filter","npn-viz-tool.filters","npn-viz-tool.vis-scatter","npn-viz-tool.vis-calendar","ui.bootstrap"]).factory("ChartService",["$window","$http","$log","FilterService",function(a,b,c,d){function e(a){var b=0===a.latitude||0===a.longitude||a.elevation_in_meters<0;return b&&c.warn("suspect station data",a),!b}function f(a){return d.getFilter().getGeographicArgs().length&&d.getFilteredMarkers().forEach(function(b,c){a["station_id["+c+"]"]=b.station_id}),a}function g(a){var b,c=[];for(b in a)c.push(encodeURIComponent(b)+"="+encodeURIComponent(a[b]));return c.join("&")}var h=930,i=500,j={top:20,right:30,bottom:60,left:40},k=(h-j.left-j.right,i-j.top-j.bottom,{ONE_DAY_MILLIS:864e5,getSizeInfo:function(b){var d=angular.extend({},j,b),e=Math.round(.9*a.innerWidth),f=Math.round(.5376*e),g=e-d.left-d.right,h=f-d.top-d.bottom,i={width:g,height:h,margin:d};return c.debug("sizing",i),i},leastSquares:function(a,b){var c=function(a,b){return a+b},d=1*a.reduce(c)/a.length,e=1*b.reduce(c)/b.length,f=a.map(function(a){return Math.pow(a-d,2)}).reduce(c),g=b.map(function(a){return Math.pow(a-e,2)}).reduce(c),h=a.map(function(a,c){return(a-d)*(b[c]-e)}).reduce(c),i=h/f,j=e-d*i,k=Math.pow(h,2)/(f*g);return[i,j,k]},approxY:function(a,b){var c=a[1],d=a[0];return c+d*b},getSummarizedData:function(a,c){b({method:"POST",url:"/npn_portal/observations/getSummarizedData.json",headers:{"Content-Type":"application/x-www-form-urlencoded"},transformRequest:g,data:f(a)}).success(function(a){c(a.filter(e))})},getPositiveDates:function(a,c){b({method:"POST",url:"/npn_portal/observations/getPositiveDates.json",headers:{"Content-Type":"application/x-www-form-urlencoded"},transformRequest:g,data:f(a)}).success(c)}});return k}]).directive("visDialog",[function(){return{restrict:"E",templateUrl:"js/vis/visDialog.html",transclude:!0,scope:{title:"@",modal:"="},controller:["$scope",function(){}]}}]).directive("visControl",["$modal","FilterService",function(a,b){var c=[{title:"Scatter Plot",controller:"ScatterVisCtrl",template:"js/scatter/scatter.html",description:"This visualization plots selected geographic or climactic variables against estimated onset dates for individuals for up to three species/phenophase pairs."},{title:"Calendar",controller:"CalendarVisCtrl",template:"js/calendar/calendar.html",description:"This visualization illustrates annual timing of phenophase activity for selected species/phenophase pairs. Horizontal bars represent phenological activity at a site to regional level for up to two years."}];return{restrict:"E",templateUrl:"js/vis/visControl.html",scope:{},controller:function(d){d.isFilterEmpty=b.isFilterEmpty,d.visualizations=c,d.open=function(c){b.isFilterEmpty()||a.open({templateUrl:c.template,controller:c.controller,windowClass:"vis-dialog-window",backdrop:"static",keyboard:!1,size:"lg"})}}}}]);