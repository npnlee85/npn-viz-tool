/*
 * Regs-Dot-Gov-Directives
 * Version: 0.1.0 - 2015-02-25
 */
angular.module("npn-viz-tool.filter",["isteven-multi-select"]).factory("FilterService",["$q","$http","$rootScope","uiGmapGoogleMapApi",function(a,b,c,d){function e(){return 0===Object.keys(n).length}function f(){if(!e()){var a,b,c={},d=0;for(a in n)b=n[a],b.species_id?c["species_id["+d++ +"]"]=b.species_id:"date"===a&&b.start_date&&b.end_date&&(c.start_date=b.start_date+"-01-01",c.end_date=b.end_date+"-12-31");return c}}function g(a){c.$broadcast("filter-phase2-start",{count:a.length});var b=a.filter(function(a){a.markerOpts.icon.fillColor=o.fillColor;var b,c,d=0,e={};for(b in a.species)c=n[b],e[b]=0,c?"function"==typeof c.$speciesFilter?c.$speciesFilter(a.species[b])&&(e[b]++,d++,1===d&&(a.markerOpts.icon.fillColor=c.color)):console.warn("speciesFilterTag does not expose a $speciesFilter function."):console.warn("species found in results but not in filter",a.species[b]);e.n=0;for(b in e)"n"!=b&&e[b]>0&&e.n++;return a.markerOpts.icon.strokeColor=e.n>1?"#00ff00":o.strokeColor,a.$markerKey=a.station_id+"."+a.markerOpts.icon.fillColor+"."+a.markerOpts.icon.strokeColor,d>0});return c.$broadcast("filter-phase2-end",{count:b.length}),b}function h(){var d=a.defer(),e=f();return e?(c.$broadcast("filter-phase1-start",{}),b.get("/npn_portal/observations/getAllObservationsForSpecies.json",{params:e}).success(function(a){var b,e,f,h;for(a.stations={},b=0;b<a.station_list.length;b++)a.station_list[b].markerOpts={title:a.station_list[b].station_name,icon:angular.extend({},o)},a.stations[a.station_list[b].station_id]=a.station_list[b];for(b=0;b<a.observation_list.length;b++)for(e=0;e<a.observation_list[b].stations.length;e++)if(h=a.stations[a.observation_list[b].stations[e].station_id])for(h.species||(h.species={}),f=0;f<a.observation_list[b].stations[e].species_ids.length;f++){var i=a.observation_list[b].stations[e].species_ids[f];h.species[i.species_id]?h.species[i.species_id].phenophases=h.species[i.species_id].phenophases.concat(i.phenophases):h.species[i.species_id]=i}else console.warn("Unable to find station with id",a.observation_list[b].stations[e].station_id);c.$broadcast("filter-phase1-end",{count:a.station_list.length}),console.log("results-pre",a),d.resolve(g(l=a.station_list))})):d.resolve([]),d.promise}function i(){c.$broadcast("filter-update",{})}function j(){n={},c.$broadcast("filter-reset",{})}function k(){var a,b,c=0;for(a in n)b=n[a],b.species_id&&(b.color=m(c++))}var l,m=d3.scale.category20(),n={},o={fillColor:"#00ff00",fillOpacity:.95,scale:8,strokeColor:"#204d74",strokeWeight:1};return d.then(function(a){o.path=a.SymbolPath.CIRCLE}),{getFilter:function(){return angular.extend({},n)},execute:h,reExecute:function(){return l&&l.length?g(l):[]},isFilterEmpty:e,hasDate:function(){return!!n.date},getDate:function(){return n.date},resetFilter:j,addToFilter:function(a){if(a&&a.species_id){var b=parseInt(a.species_id);n[b]||(n[b]=a,k(),i())}else a.start_date&&a.end_date&&(n.date=a,i())},removeFromFilter:function(a){a&&a.species_id?(delete n[parseInt(a.species_id)],e()?j():i()):a&&a.start_date&&a.end_date&&j()}}}]).directive("npnFilterResults",["$document","$rootScope","$http","FilterService",function(a,b,c,d){return{restrict:"E",template:'<ui-gmap-markers models="results.markers" idKey="\'$markerKey\'" coords="\'self\'" icon="\'icon\'" options="\'markerOpts\'" doCluster="doCluster"></ui-gmap-markers>',scope:{},controller:function(b){function c(){d.isFilterEmpty()||(b.results.markers=[],d.execute().then(function(a){b.results.markers=a}))}var e=!1;b.results={markers:[]},b.doCluster=!0,b.$on("tool-open",function(a,b){e="filter"===b.tool.id}),b.$on("tool-close",function(a,b){"filter"===b.tool.id&&(e=!1,c())}),b.$on("filter-update",function(){e||c()}),b.$on("filter-reset",function(){b.results.markers=[]}),b.$on("filter-rerun-phase2",function(){b.results.markers=d.reExecute()}),a.bind("keypress",function(a){(99===a.charCode||"C"===a.key)&&b.$apply(function(){b.doCluster=!b.doCluster})})}}}]).directive("filterTags",["FilterService",function(a){return{restrict:"E",templateUrl:"js/filter/filterTags.html",scope:{},controller:function(b){b.getFilter=a.getFilter}}}]).directive("speciesFilterTag",["$rootScope","$http","FilterService",function(a,b,c){return{restrict:"E",require:"^filterTags",templateUrl:"js/filter/speciesFilterTag.html",scope:{item:"="},controller:function(d){d.$on("filter-phase2-start",function(){d.count=0,angular.forEach(d.item.phenophases,function(a){a.count=0})}),d.$on("filter-phase1-start",function(){d.count="?",angular.forEach(d.item.phenophases,function(a){a.count="?"})}),d.item.$speciesFilter=function(a){a.species_id!=d.item.species_id&&console.warn("$filter called on wrong species",d.item,a);var b=a.phenophases.filter(function(a){return d.item.phenophasesMap[a.phenophase_id].count++,d.item.phenophasesMap[a.phenophase_id].selected});return b.length>0&&d.count++,b.length>0},d.count="?",d.removeFromFilter=c.removeFromFilter,d.status={isopen:!1};var e;d.$watch("status.isopen",function(){if(d.status.isopen)e=d.item.phenophases.map(function(a){return a.selected});else if(e)for(var b=0;b<e.length;b++)if(e[b]!=d.item.phenophases[b].selected){a.$broadcast("filter-rerun-phase2",{});break}}),d.selectAll=function(a){angular.forEach(d.item.phenophases,function(b){b.selected=a})},b.get("/npn_portal/phenophases/getPhenophasesForSpecies.json",{params:{return_all:!0,species_id:d.item.species_id}}).success(function(a){var b={};d.item.phenophases=a[0].phenophases.filter(function(a){return b[a.phenophase_id]?!1:(b[a.phenophase_id]=a,a.selected=!0)}),d.item.phenophasesMap={},angular.forEach(d.item.phenophases,function(a){d.item.phenophasesMap[a.phenophase_id]=a})})}}}]).directive("dateFilterTag",["FilterService",function(a){return{restrict:"E",require:"^filterTags",templateUrl:"js/filter/dateFilterTag.html",scope:{item:"="},controller:function(b){b.removeFromFilter=a.removeFromFilter,b.count="?",b.$on("filter-phase1-start",function(){b.count="?"}),b.$on("filter-phase2-start",function(){b.count=0}),b.$on("filter-phase2-end",function(a,c){b.count=c.count})}}}]).directive("filterControl",["$http","$filter","FilterService",function(a,b,c){return{restrict:"E",templateUrl:"js/filter/filter.html",controller:["$scope",function(b){function d(){b.serverResults=void 0,b.selected.speciesToAdd=b.selected.addSpecies=void 0;var a={},c=0;angular.forEach([].concat(b.animals).concat(b.plants),function(b){a["group_ids["+c++ +"]"]=b.species_type_id}),b.networks.length&&(a.network_id=b.networks[0].network_id),h=a,b.findSpeciesParamsEmpty=0===Object.keys(a).length}b.addDateRangeToFilter=function(){c.addToFilter(b.selected.date),b.selected.date={}},b.filterHasDate=c.hasDate;for(var e=(new Date).getYear()+1900,f=[],g=2010;e>=g;g++)f.push(g);b.thisYear=e,b.validYears=f,b.selected={addSpecies:void 0,date:{start_date:e-1,end_date:e}},b.addSpeciesToFilter=function(a){c.addToFilter(a),b.selected.speciesToAdd=b.selected.addSpecies=void 0},b.animals=[],b.plants=[],b.networks=[],b.findSpeciesParamsEmpty=!0;var h;b.$watch("animals",d),b.$watch("plants",d),b.$watch("networks",d),b.$watch("selected.addSpecies",function(){b.selected.speciesToAdd=angular.isObject(b.selected.addSpecies)?b.selected.addSpecies:void 0}),b.findSpecies=function(){return b.serverResults||(b.serverResults=a.get("/npn_portal/species/getSpeciesFilter.json",{params:h}).then(function(a){var c=[];return angular.forEach(a.data,function(a){a.number_observations=parseInt(a.number_observations),a.$display=a.common_name+" ("+a.number_observations+")",c.push(a)}),b.serverResults=c.sort(function(a,b){return a.number_observations<b.number_observations?1:a.number_observations>b.number_observations?-1:0})})),b.serverResults},a.get("/npn_portal/networks/getPartnerNetworks.json").success(function(a){angular.forEach(a,function(a){a.network_name=a.network_name.trim()}),b.partners=a}),a.get("/npn_portal/species/getPlantTypes.json").success(function(a){b.plantTypes=a}),a.get("/npn_portal/species/getAnimalTypes.json").success(function(a){b.animalTypes=a})}]}}]),angular.module("npn-viz-tool.filters",[]).filter("gte",function(){return function(a,b){return b&&angular.isArray(a)?a.filter(function(a){return a>=b}):a}}).filter("lte",function(){return function(a,b){return b&&angular.isArray(a)?a.filter(function(a){return b>=a}):a}}).filter("trim",function(){return function(a){return angular.isString(a)?a.trim():a}}).filter("faFileIcon",function(){var a={pdf:"fa-file-pdf-o"};return function(b){return b&&!a[b]&&console.debug("no explicit file type icon for "+b),a[b]||"fa-file-o"}}).filter("ellipses",function(){return function(a){var b=2==arguments.length?arguments[1]:55;return"string"==typeof a&&a.length>b?a.substring(0,b)+" ...":a}}),angular.module("npn-viz-tool",["templates-npnvis","npn-viz-tool.services","npn-viz-tool.map","npn-viz-tool.toolbar","npn-viz-tool.filters","uiGmapgoogle-maps","ui.bootstrap","ngAnimate"]).config(function(a){a.configure({v:"3.17",libraries:"geometry"})}),angular.module("npn-viz-tool.map",["npn-viz-tool.services","npn-viz-tool.stations","npn-viz-tool.toolbar","npn-viz-tool.filter","uiGmapgoogle-maps"]).directive("npnVizMap",["$document","uiGmapGoogleMapApi","uiGmapIsReady","FilterService",function(a,b){return{restrict:"E",templateUrl:"js/map/map.html",scope:{},controller:["$scope",function(a){a.stationView=!0,b.then(function(b){console.log("maps",b),a.map={center:{latitude:38.8402805,longitude:-97.61142369999999},zoom:4,options:{streetViewControl:!1,panControl:!1,zoomControl:!0,zoomControlOptions:{style:b.ZoomControlStyle.SMALL,position:b.ControlPosition.RIGHT_TOP}}}}),a.$on("filter-phase1-start",function(){a.stationView=!1}),a.$on("filter-reset",function(){a.stationView=!0})}]}}]).directive("npnWorking",["uiGmapIsReady",function(a){return{restrict:"E",template:'<div id="npn-working" ng-if="working"><i class="fa fa-circle-o-notch fa-spin fa-5x"></i></div>',scope:{},controller:function(b){function c(){b.working=!0}function d(){b.working=!1}b.working=!0,a.promise(1).then(function(){b.working=!1}),b.$on("filter-phase1-start",c),b.$on("filter-phase2-start",c),b.$on("filter-phase2-end",d)}}}]),angular.module("templates-npnvis",["js/filter/dateFilterTag.html","js/filter/filter.html","js/filter/filterTags.html","js/filter/speciesFilterTag.html","js/map/map.html","js/toolbar/tool.html","js/toolbar/toolbar.html"]),angular.module("js/filter/dateFilterTag.html",[]).run(["$templateCache",function(a){a.put("js/filter/dateFilterTag.html",'<div class="btn-group">\n    <button class="btn btn-default" disabled>\n        {{item.start_date}} - {{item.end_date}} <span class="badge">{{count}}</span>\n    </button>\n    <button class="btn btn-default" ng-click="removeFromFilter(item)">\n        <i class="fa fa-times-circle-o"></i>\n    </button>\n</div>')}]),angular.module("js/filter/filter.html",[]).run(["$templateCache",function(a){a.put("js/filter/filter.html",'<ul class="list-unstyled">\n    <li>\n        <label for="yearInputForm">Years (at most two)</label>\n        <form id="yearInputForm" name="yearInputForm">\n        <input id="start_date" type="number" class="form-control"\n               max="{{selected.date.end_date || thisYear}}"\n               ng-model="selected.date.start_date"\n               typeahead="year for year in validYears | lte:selected.date.end_date | filter:$viewValue"\n               required placeholder="From" /> - \n        <input id="end_date" type="number" class="form-control"\n                min="{{selected.date.start_date || 2010}}"\n                ng-model="selected.date.end_date"\n                typeahead="year for year in validYears | gte:selected.date.start_date | filter:$viewValue"\n                required placeholder="To" />\n        <button class="btn btn-default"\n                ng-disabled="yearInputForm.$invalid || ((selected.date.end_date - selected.date.start_date) > 2) || filterHasDate()"\n                ng-click="addDateRangeToFilter()"><i class="fa fa-plus"></i></button>\n        </form>\n    </li>\n    <li class="divider"></li>\n    <li>\n        <label for="species">Species</label>\n        <input id="species"\n               type="text" class="form-control"\n               placeholder="Add Species To Filter"\n               typeahead="sp as sp.$display for sp in findSpecies()  | filter:{common_name:$viewValue} | limitTo:15"\n               typeahead-loading="findingSpecies"\n               ng-model="selected.addSpecies"\n               ng-disabled="findSpeciesParamsEmpty || !filterHasDate()" />\n        <button class="btn btn-default" ng-disabled="!selected.speciesToAdd"\n                ng-click="addSpeciesToFilter(selected.speciesToAdd)">\n            <i class="fa" ng-class="{\'fa-refresh fa-spin\': findingSpecies, \'fa-plus\': !findingSpecies}"></i>\n        </button>\n    </li>\n    <li>\n        <label>Animal Types</label>\n        <div isteven-multi-select\n            max-labels="3"\n            input-model="animalTypes"\n            output-model="animals"\n            button-label="species_type"\n            item-label="species_type"\n            tick-property="selected"\n            orientation="horizontal"\n            is-disabled="!filterHasDate()"\n            helper-elements="all none reset filter"></div>\n    </li>\n    <li>\n        <label>Plant Types</label>\n        <div isteven-multi-select\n            max-labels="3"\n            input-model="plantTypes"\n            output-model="plants"\n            button-label="species_type"\n            item-label="species_type"\n            tick-property="selected"\n            orientation="horizontal"\n            is-disabled="!filterHasDate()"\n            helper-elements="all none reset filter"></div>\n    </li>\n    <li>\n        <label>Partners</label>\n        <div isteven-multi-select\n            max-labels="1"\n            input-model="partners"\n            output-model="networks"\n            button-label="network_name"\n            item-label="network_name"\n            tick-property="selected"\n            orientation="horizontal"\n            is-disabled="!filterHasDate()"\n            selection-mode="single"></div>\n    </li>\n</ul>\n')}]),angular.module("js/filter/filterTags.html",[]).run(["$templateCache",function(a){a.put("js/filter/filterTags.html",'<ul class="list-inline filter-tags">\n    <li ng-repeat="(key, value) in getFilter()">\n        <species-filter-tag ng-if="value.species_id" item="value"></species-filter-tag>\n        <date-filter-tag ng-if ="value.start_date && value.end_date" item="value"></date-filter-tag>\n    </li>\n</ul>')}]),angular.module("js/filter/speciesFilterTag.html",[]).run(["$templateCache",function(a){a.put("js/filter/speciesFilterTag.html",'<div class="btn-group filter-tag" ng-class="{open: status.isopen}">\n    <button type="button" class="btn btn-primary" style="background-color: {{item.color}};" ng-disabled="!item.phenophases" ng-click="status.isopen = !status.isopen">\n        {{item.common_name}} <span class="badge">{{count}}</span> <span class="caret"></span>\n    </button>\n    <ul class="dropdown-menu phenophase-list" role="menu">\n        <li class="inline">Select <a href ng-click="selectAll(true)">all</a> <a href ng-click="selectAll(false)">none</a></li>\n        <li class="divider"></li>\n        <li ng-repeat="phenophase in item.phenophases">\n            <input type="checkbox" ng-model="phenophase.selected"> <span class="badge">{{phenophase.count}}</span> {{phenophase.phenophase_name}}\n        </li>\n    </ul>\n    <button class="btn btn-primary" style="background-color: {{item.color}};" ng-click="removeFromFilter(item)">\n        <i class="fa fa-times-circle-o"></i>\n    </button>\n</div>')}]),angular.module("js/map/map.html",[]).run(["$templateCache",function(a){a.put("js/map/map.html",'<npn-working></npn-working>\n\n<ui-gmap-google-map ng-if="map" center=\'map.center\' zoom=\'map.zoom\' options="map.options">\n    <npn-stations ng-if="stationView"></npn-stations>\n    <npn-filter-results></npn-filter-results>\n</ui-gmap-google-map>\n\n<filter-tags></filter-tags>\n\n<toolbar>\n    <tool id="filter" icon="fa-search" title="Filter">\n        <filter-control></filter-control>\n    </tool>\n    <tool id="layers" icon="fa-bars" title="Layers">\n        layer content\n    </tool>\n    <tool id="visualizations" icon="fa-bar-chart" title="Visualizations">\n        visualization content\n    </tool>\n    <tool id="settings" icon="fa-cog" title="Settings">\n        settings content\n    </tool>\n</toolbar>')}]),angular.module("js/toolbar/tool.html",[]).run(["$templateCache",function(a){a.put("js/toolbar/tool.html",'<div class="tool-content {{title.toLowerCase()}}" ng-show="selected">\n    <h2>{{title}}</h2>\n    <div ng-transclude>\n    </div>\n</div>')}]),angular.module("js/toolbar/toolbar.html",[]).run(["$templateCache",function(a){a.put("js/toolbar/toolbar.html",'<div class="toolbar">\n  <ul class="tools-list">\n    <li ng-repeat="t in tools" ng-class="{open: t.selected}"\n        popover-placement="right" popover="{{t.title}}" popover-trigger="mouseenter" popover-popup-delay="1000"\n        ng-click="select(t)">\n      <i class="fa {{t.icon}}"></i>\n    </li>\n  </ul>\n  <div class="toolbar-content" ng-class="{open: open}" ng-transclude></div>\n</div>')}]),angular.module("npn-viz-tool.services",["ngResource"]).factory("LayerService",["$http","$q","uiGmapIsReady",function(a,b,c){function d(c){var d=b.defer();return c.data?d.resolve(c):a.get("layers/"+c.file).success(function(a){c.data=a,d.resolve(c)}),d.promise}function e(){g.data.setStyle(function(a){var b=a.getProperty("$style");return b&&"function"==typeof b?b(a):b?angular.extend(i,b):i})}var f=null,g=null,h=c.promise(1).then(function(b){return g=b[0].map,console.log("LayerService - map is ready"),a.get("layers/layers.json").success(function(a){f={},a.forEach(function(a){f[a.label]=a}),console.log("LayerService - layer list is loaded",f)})}),i={strokeColor:"#ffffff",strokeOpacity:null,strokeWeight:1,fillColor:"#c0c5b8",fillOpacity:null};return{restyleLayers:function(){var a=b.defer();return h.then(function(){e(),a.resolve()}),a.promise},resetLayers:function(){var a=b.defer();return h.then(function(){for(var b in f){var c,d=f[b];if(d.loaded){for(c=0;c<d.loaded.length;c++)d.loaded[c].removeProperty("$style"),g.data.remove(d.loaded[c]);delete d.loaded}}a.resolve()}),a.promise},loadLayer:function(a,c){var i=b.defer();return h.then(function(){var b=f[a];return b?void d(b).then(function(){b.style=c,b.loaded=g.data.addGeoJson(b.data),b.loaded.forEach(function(a){a.setProperty("$style",c)}),e(),i.resolve([g,b.loaded])}):(console.log("no such layer labeled",a),i.reject(a))}),i.promise}}}]),angular.module("npn-viz-tool.stations",["npn-viz-tool.services"]).directive("npnStations",["$http","LayerService",function(a,b){return{restrict:"E",template:'<ui-gmap-markers models="stations.markers" idKey="\'station_id\'" coords="\'self\'" icon="\'icon\'" options="\'markerOpts\'" doCluster="true"></ui-gmap-markers>',scope:{},controller:["$scope",function(c){c.stations={states:[],markers:[]};var d=[];a.get("/npn_portal/stations/getStationCountByState.json").success(function(e){var f=e.reduce(function(a,b){return a[b.state]=b,b.number_stations=parseInt(b.number_stations),a.$min=Math.min(a.$min,b.number_stations),a.$max=Math.max(a.$max,b.number_stations),a},{$max:0,$min:0}),g=d3.scale.linear().domain([f.$min,f.$max]).range(["#F7FBFF","#08306B"]);b.resetLayers().then(function(){b.loadLayer("US States",function(a){var b=a.getProperty("NAME"),d=-1!=c.stations.states.indexOf(b),e=f[b],h={strokeOpacity:1,strokeColor:"#ffffff",strokeWeight:1,fillOpacity:0};return e&&!d?(e.visited=!0,h.fillOpacity=.8,h.fillColor=g(e.number_stations),h.clickable=!0):d||console.warn("no station count for "+b),h}).then(function(b){var e=b[0];d.push(e.data.addListener("mouseover",function(a){e.data.overrideStyle(a.feature,{strokeWeight:3})})),d.push(e.data.addListener("mouseout",function(){e.data.revertStyle()})),d.push(e.data.addListener("click",function(b){var d=b.feature.getProperty("NAME");-1===c.stations.states.indexOf(d)&&(c.stations.states.push(d),e.panTo(b.latLng),e.setZoom(6),a.get("/npn_portal/stations/getAllStations.json",{params:{state_code:d}}).success(function(a){a.forEach(function(a){a.markerOpts={title:a.station_name}}),c.stations.markers=c.stations.markers.concat(a),e.data.remove(b.feature)}))}))})})}),c.$on("$destroy",function(){b.resetLayers(),d.forEach(function(a){a.remove()})})}]}}]),angular.module("npn-viz-tool.toolbar",[]).directive("toolbar",["$rootScope",function(a){return{restrict:"E",templateUrl:"js/toolbar/toolbar.html",transclude:!0,scope:{},controller:function(b){var c=b.tools=[];b.select=function(c){c.selected=!c.selected,b.open=c.selected,a.$broadcast("tool-"+(c.selected?"open":"close"),{tool:c})},this.addTool=function(a){c.push(a)}}}}]).directive("tool",[function(){return{restrict:"E",require:"^toolbar",templateUrl:"js/toolbar/tool.html",transclude:!0,scope:{id:"@",title:"@",icon:"@"},link:function(a,b,c,d){d.addTool(a)}}}]);