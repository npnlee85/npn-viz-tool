/*
 * Regs-Dot-Gov-Directives
 * Version: 0.1.0 - 2015-02-26
 */
angular.module("npn-viz-tool.filter",["npn-viz-tool.settings","isteven-multi-select"]).factory("FilterService",["$q","$http","$rootScope","$timeout","uiGmapGoogleMapApi",function(a,b,c,d,e){function f(){return 0===Object.keys(o).length}function g(){if(!f()){var a,b,c={},d=0;for(a in o)b=o[a],b.species_id?c["species_id["+d++ +"]"]=b.species_id:"date"===a&&b.start_date&&b.end_date&&(c.start_date=b.start_date+"-01-01",c.end_date=b.end_date+"-12-31");return c}}function h(a){c.$broadcast("filter-phase2-start",{count:a.length});var b=0,d=a.filter(function(a){if(Object.keys(p).length>0){var c,d=!1;for(c in p)if(d=p[c].$geoFilter(a))break;if(!d)return!1}a.markerOpts.icon.fillColor=q.fillColor;var e,f,g,h=0,i={};for(e in a.species)f=o[e],i[e]=0,f?"function"==typeof f.$speciesFilter?(g=f.$speciesFilter(a.species[e]))&&(b+=g,i[e]++,h++,1===h&&(a.markerOpts.icon.fillColor=f.color)):console.warn("speciesFilterTag does not expose a $speciesFilter function."):console.warn("species found in results but not in filter",a.species[e]);i.n=0;for(e in i)"n"!=e&&i[e]>0&&i.n++;return a.markerOpts.icon.strokeColor=i.n>1?"#00ff00":q.strokeColor,a.$markerKey=a.station_id+"."+a.markerOpts.icon.fillColor+"."+a.markerOpts.icon.strokeColor,h>0});return c.$broadcast("filter-phase2-end",{station:d.length,observation:b}),d}function i(){var d=a.defer(),e=g();return e?(c.$broadcast("filter-phase1-start",{}),b.get("/npn_portal/observations/getAllObservationsForSpecies.json",{params:e}).success(function(a){var b,e,f,g;for(a.stations={},b=0;b<a.station_list.length;b++)a.station_list[b].markerOpts={title:a.station_list[b].station_name,icon:angular.extend({},q)},a.stations[a.station_list[b].station_id]=a.station_list[b];for(b=0;b<a.observation_list.length;b++)for(e=0;e<a.observation_list[b].stations.length;e++)if(g=a.stations[a.observation_list[b].stations[e].station_id])for(g.species||(g.species={}),f=0;f<a.observation_list[b].stations[e].species_ids.length;f++){var i=a.observation_list[b].stations[e].species_ids[f];g.species[i.species_id]?g.species[i.species_id].phenophases=g.species[i.species_id].phenophases.concat(i.phenophases):g.species[i.species_id]=i}else console.warn("Unable to find station with id",a.observation_list[b].stations[e].station_id);c.$broadcast("filter-phase1-end",{count:a.station_list.length}),console.log("results-pre",a),d.resolve(h(m=a.station_list))})):d.resolve([]),d.promise}function j(){c.$broadcast("filter-update",{})}function k(){o={},c.$broadcast("filter-reset",{})}function l(){var a,b,c=0;for(a in o)b=o[a],b.species_id&&(b.color=n(c++))}var m,n=d3.scale.category20(),o={},p={},q={fillColor:"#00ff00",fillOpacity:.95,scale:8,strokeColor:"#204d74",strokeWeight:1};return e.then(function(a){q.path=a.SymbolPath.CIRCLE}),c.$on("filter-rerun-phase2",function(){d(function(){if(m){var a=h(m);c.$broadcast("filter-marker-updates",{markers:a})}},500)}),{getFilter:function(){return angular.extend({},o)},execute:i,reExecute:function(){return m&&m.length?h(m):[]},isFilterEmpty:f,hasDate:function(){return!!o.date},getDate:function(){return o.date},resetFilter:k,addToFilter:function(a){if(a&&a.species_id){var b=parseInt(a.species_id);o[b]||(o[b]=a,l(),j())}else a&&a.start_date&&a.end_date?(o.date=a,j()):a&&a.geoKey&&(p[a.geoKey]=a)},removeFromFilter:function(a){a&&a.species_id?(delete o[parseInt(a.species_id)],f()?k():j()):a&&a.start_date&&a.end_date?k():a&&a.geoKey&&delete p[a.geoKey]}}}]).directive("npnFilterResults",["$rootScope","$http","FilterService","SettingsService",function(a,b,c,d){return{restrict:"E",template:'<ui-gmap-markers models="results.markers" idKey="\'$markerKey\'" coords="\'self\'" icon="\'icon\'" options="\'markerOpts\'" doCluster="doCluster"></ui-gmap-markers>',scope:{},controller:function(a){function b(){c.isFilterEmpty()||(a.results.markers=[],c.execute().then(function(b){a.results.markers=b}))}var e=!1;a.results={markers:[]},a.doCluster=d.getSettingValue("clusterMarkers"),a.$on("setting-update-clusterMarkers",function(b,c){a.doCluster=c.value}),a.$on("tool-open",function(a,b){e="filter"===b.tool.id}),a.$on("tool-close",function(a,c){"filter"===c.tool.id&&(e=!1,b())}),a.$on("filter-update",function(){e||b()}),a.$on("filter-reset",function(){a.results.markers=[]}),a.$on("filter-marker-updates",function(b,c){console.log("update data",c),a.results.markers=c.markers})}}}]).directive("filterTags",["FilterService",function(a){return{restrict:"E",templateUrl:"js/filter/filterTags.html",scope:{},controller:function(b){b.getFilter=a.getFilter}}}]).filter("speciesBadge",function(){return function(a,b){return"observation-count"===b?a.observation:"station-count"===b?a.station:"station-observation-count"===b?a.station+"/"+a.observation:a}}).directive("speciesFilterTag",["$rootScope","$http","FilterService","SettingsService",function(a,b,c,d){return{restrict:"E",require:"^filterTags",templateUrl:"js/filter/speciesFilterTag.html",scope:{item:"="},controller:function(e){e.badgeFormat=d.getSettingValue("tagBadgeFormat"),e.$on("setting-update-tagBadgeFormat",function(a,b){e.badgeFormat=b.value}),e.counts={station:"?",observation:"?"},e.$on("filter-phase2-start",function(){e.counts.station=e.counts.observation=0,angular.forEach(e.item.phenophases,function(a){a.count=0})}),e.$on("filter-phase1-start",function(){e.counts.station=e.counts.observation="?",angular.forEach(e.item.phenophases,function(a){a.count="?"})}),e.item.$speciesFilter=function(a){var b=0;a.species_id!=e.item.species_id&&console.warn("$filter called on wrong species",e.item,a);var c=a.phenophases.filter(function(a){return e.item.phenophasesMap[a.phenophase_id].count++,e.item.phenophasesMap[a.phenophase_id].selected&&b++,e.item.phenophasesMap[a.phenophase_id].selected});return c.length>0&&e.counts.station++,e.counts.observation+=b,b},e.removeFromFilter=c.removeFromFilter,e.status={isopen:!1};var f;e.$watch("status.isopen",function(){if(e.status.isopen)f=e.item.phenophases.map(function(a){return a.selected});else if(f)for(var b=0;b<f.length;b++)if(f[b]!=e.item.phenophases[b].selected){a.$broadcast("filter-rerun-phase2",{});break}}),e.selectAll=function(a){angular.forEach(e.item.phenophases,function(b){b.selected=a})},b.get("/npn_portal/phenophases/getPhenophasesForSpecies.json",{params:{return_all:!0,species_id:e.item.species_id}}).success(function(a){var b={};e.item.phenophases=a[0].phenophases.filter(function(a){return b[a.phenophase_id]?!1:(b[a.phenophase_id]=a,a.selected=!0)}),e.item.phenophasesMap={},angular.forEach(e.item.phenophases,function(a){e.item.phenophasesMap[a.phenophase_id]=a})})}}}]).directive("dateFilterTag",["FilterService","SettingsService",function(a,b){return{restrict:"E",require:"^filterTags",templateUrl:"js/filter/dateFilterTag.html",scope:{item:"="},controller:function(c){c.badgeFormat=b.getSettingValue("tagBadgeFormat"),c.$on("setting-update-tagBadgeFormat",function(a,b){c.badgeFormat=b.value}),c.removeFromFilter=a.removeFromFilter,c.counts={station:"?",observation:"?"},c.$on("filter-phase1-start",function(){c.counts.station=c.counts.observation="?"}),c.$on("filter-phase2-start",function(){c.counts.station=c.counts.observation=0}),c.$on("filter-phase2-end",function(a,b){c.counts=b})}}}]).directive("filterControl",["$http","$filter","FilterService",function(a,b,c){return{restrict:"E",templateUrl:"js/filter/filterControl.html",controller:["$scope",function(b){function d(){b.serverResults=void 0,b.selected.speciesToAdd=b.selected.addSpecies=void 0;var a={},c=0;angular.forEach([].concat(b.speciesInput.animals).concat(b.speciesInput.plants),function(b){a["group_ids["+c++ +"]"]=b.species_type_id}),b.speciesInput.networks.length&&(a.network_id=b.speciesInput.networks[0].network_id),h=a,b.findSpeciesParamsEmpty=0===Object.keys(a).length}b.addDateRangeToFilter=function(){c.addToFilter(b.selected.date)},b.filterHasDate=c.hasDate;for(var e=(new Date).getYear()+1900,f=[],g=2008;e>=g;g++)f.push(g);b.thisYear=e,b.validYears=f,b.selected={addSpecies:void 0,date:{start_date:e-1,end_date:e}},b.addSpeciesToFilter=function(a){c.addToFilter(a),b.selected.speciesToAdd=b.selected.addSpecies=void 0},b.speciesInput={animals:[],plants:[],networks:[]},b.findSpeciesParamsEmpty=!0;var h;b.$watch("speciesInput.animals",d),b.$watch("speciesInput.plants",d),b.$watch("speciesInput.networks",d),b.$watch("selected.addSpecies",function(){b.selected.speciesToAdd=angular.isObject(b.selected.addSpecies)?b.selected.addSpecies:void 0}),b.findSpecies=function(){return b.serverResults||(b.serverResults=a.get("/npn_portal/species/getSpeciesFilter.json",{params:h}).then(function(a){var c=[];return angular.forEach(a.data,function(a){a.number_observations=parseInt(a.number_observations),a.$display=a.common_name+" ("+a.number_observations+")",c.push(a)}),b.serverResults=c.sort(function(a,b){return a.number_observations<b.number_observations?1:a.number_observations>b.number_observations?-1:0})})),b.serverResults},a.get("/npn_portal/networks/getPartnerNetworks.json").success(function(a){angular.forEach(a,function(a){a.network_name=a.network_name.trim()}),b.partners=a}),a.get("/npn_portal/species/getPlantTypes.json").success(function(a){b.plantTypes=a}),a.get("/npn_portal/species/getAnimalTypes.json").success(function(a){b.animalTypes=a})}]}}]),angular.module("npn-viz-tool.filters",[]).filter("yesNo",function(){return function(a){return a?"Yes":"No"}}).filter("gte",function(){return function(a,b){return b&&angular.isArray(a)?a.filter(function(a){return a>=b}):a}}).filter("lte",function(){return function(a,b){return b&&angular.isArray(a)?a.filter(function(a){return b>=a}):a}}).filter("trim",function(){return function(a){return angular.isString(a)?a.trim():a}}).filter("faFileIcon",function(){var a={pdf:"fa-file-pdf-o"};return function(b){return b&&!a[b]&&console.debug("no explicit file type icon for "+b),a[b]||"fa-file-o"}}).filter("ellipses",function(){return function(a){var b=2==arguments.length?arguments[1]:55;return"string"==typeof a&&a.length>b?a.substring(0,b)+" ...":a}}),angular.module("npn-viz-tool.layers",["npn-viz-tool.filter","ngResource"]).factory("LayerService",["$rootScope","$http","$q","uiGmapIsReady",function(a,b,c,d){function e(d){var e=c.defer();return d.data?e.resolve(d):(a.$broadcast("layer-load-start",{}),b.get("layers/"+d.file).success(function(b){"GeometryCollection"===b.type&&(console.log("Translating GeometryCollection to FeatureCollection"),b.features=[],angular.forEach(b.geometries,function(a,c){b.features.push({type:"Feature",properties:{NAME:d.id+"-"+c},geometry:a})}),b.type="FeatureCollection",delete b.geometries),d.data=b,e.resolve(d),a.$broadcast("layer-load-end",{})})),e.promise}function f(){i.data.setStyle(function(a){var b=a.getProperty("$style");return b&&"function"==typeof b?b(a):b?angular.extend(k,b):k})}function g(a){if(a.loaded){for(var b=[],c=0;c<a.loaded.length;c++)a.loaded[c].removeProperty("$style"),i.data.remove(a.loaded[c]),b.push(a.loaded[c]);return delete a.loaded,b}}var h=null,i=null,j=d.promise(1).then(function(a){return i=a[0].map,console.log("LayerService - map is ready"),b.get("layers/layers.json").success(function(a){h={},a.forEach(function(a,b){a.index=b,h[a.id]=a}),console.log("LayerService - layer list is loaded",h)})}),k={strokeColor:"#ffffff",strokeOpacity:null,strokeWeight:1,fillColor:"#c0c5b8",fillOpacity:null};return{getAvailableLayers:function(){var a=c.defer();return j.then(function(){var b,c,d=[];for(b in h)c=h[b],d.push({id:c.id,index:c.index,label:c.label,source:c.source,img:c.img,link:c.link});a.resolve(d.sort(function(a,b){return a.idx-b.idx}))}),a.promise},restyleLayers:function(){var a=c.defer();return j.then(function(){f(),a.resolve()}),a.promise},resetLayers:function(){var a=c.defer();return j.then(function(){for(var b in h)g(h[b]);a.resolve()}),a.promise},loadLayer:function(a,b){var d=c.defer();return j.then(function(){var c=h[a];return c?void e(c).then(function(){c.style=b,c.loaded=i.data.addGeoJson(c.data),c.loaded.forEach(function(a){a.setProperty("$style",b)}),f(),d.resolve([i,c.loaded])}):(console.log("no such layer with id",a),d.reject(a))}),d.promise},unloadLayer:function(a){var b=c.defer();return j.then(function(){var c=h[a];if(!c)return console.log("no such layer with id",a),b.reject(a);var d=g(c);b.resolve(d)}),b.promise}}}]).directive("layerControl",["$rootScope","LayerService","FilterService",function(a,b,c){function d(a,b){var c,e,f,g=b.getType();if("Polygon"==g)return c=new google.maps.Polygon({paths:b.getArray()[0].getArray()}),google.maps.geometry.poly.containsLocation(a,c)||google.maps.geometry.poly.isLocationOnEdge(a,c);if("MultiPolygon"===g||"GeometryCollection"==g)for(e=b.getArray(),f=0;f<e.length;f++)if(d(a,e[f]))return!0;return!1}return{restrict:"E",templateUrl:"js/layers/layerControl.html",controller:function(e){function f(f){"none"!==f&&b.loadLayer(f.id,function(a){var b={strokeOpacity:1,strokeColor:"#ffffff",strokeWeight:1,fillOpacity:0};return a.getProperty("$FILTER")&&(b.fillColor="#800000",b.fillOpacity=.5),b}).then(function(f){if(!h.length){var i=f[0];e.$on("filter-phase2-end",function(){g&&(i.panTo(g.latLng),g=null)}),h.push(i.data.addListener("mouseover",function(a){i.data.overrideStyle(a.feature,{strokeWeight:3})})),h.push(i.data.addListener("mouseout",function(){i.data.revertStyle()})),h.push(i.data.addListener("click",function(f){e.$apply(function(){g=f;var e=f.feature,h=e.getProperty("NAME"),j=e.getProperty("$FILTER");console.log("name",h,j),j?(c.removeFromFilter(j),j=null):(j={geoKey:h,feature:e,$geoFilter:function(a){return d(new google.maps.LatLng(parseFloat(a.latitude),parseFloat(a.longitude)),j.feature.getGeometry())}},c.addToFilter(j),i.data.overrideStyle(e,{fillColor:"#800000"})),e.setProperty("$FILTER",j),b.restyleLayers().then(function(){c.isFilterEmpty()||a.$broadcast("filter-rerun-phase2",{})})})}))}})}var g,h=[];b.getAvailableLayers().then(function(a){console.log("av.layers",a),e.layers=a}),e.layerOnMap={layer:"none"},e.$watch("layerOnMap.layer",function(d,e){console.log("layerOnMap.new",d),console.log("layerOnMap.old",e),e&&"none"!=e?b.unloadLayer(e.id).then(function(b){var e=!1;b.forEach(function(a){var b=a.getProperty("$FILTER");b&&(e=!0,c.removeFromFilter(b),a.setProperty("$FILTER",null))}),e&&!c.isFilterEmpty()&&a.$broadcast("filter-rerun-phase2",{}),f(d)}):d&&f(d)}),e.$on("$destroy",function(){b.resetLayers(),h.forEach(function(a){a.remove()})})}}}]),angular.module("npn-viz-tool",["templates-npnvis","npn-viz-tool.layers","npn-viz-tool.map","npn-viz-tool.toolbar","npn-viz-tool.filters","uiGmapgoogle-maps","ui.bootstrap","ngAnimate"]).config(function(a){a.configure({v:"3.17",libraries:"geometry"})}),angular.module("npn-viz-tool.map",["npn-viz-tool.layers","npn-viz-tool.stations","npn-viz-tool.toolbar","npn-viz-tool.filter","npn-viz-tool.settings","uiGmapgoogle-maps"]).directive("npnVizMap",["uiGmapGoogleMapApi","uiGmapIsReady","FilterService",function(a){return{restrict:"E",templateUrl:"js/map/map.html",scope:{},controller:["$scope",function(b){b.stationView=!0,a.then(function(a){console.log("maps",a),b.map={center:{latitude:38.8402805,longitude:-97.61142369999999},zoom:4,options:{streetViewControl:!1,panControl:!1,zoomControl:!0,zoomControlOptions:{style:a.ZoomControlStyle.SMALL,position:a.ControlPosition.RIGHT_TOP}}}}),b.$on("tool-open",function(a,c){"layers"===c.tool.id&&(b.stationView=!1)}),b.$on("filter-phase1-start",function(){b.stationView=!1}),b.$on("filter-reset",function(){b.stationView=!0})}]}}]).directive("npnWorking",["uiGmapIsReady",function(a){return{restrict:"E",template:'<div id="npn-working" ng-show="working"><i class="fa fa-circle-o-notch fa-spin fa-5x"></i></div>',scope:{},controller:function(b){function c(){b.working=!0}function d(){b.working=!1}c(),a.promise(1).then(d),b.$on("filter-phase1-start",c),b.$on("filter-phase2-start",c),b.$on("filter-rerun-phase2",c),b.$on("filter-phase2-end",d),b.$on("layer-load-start",c),b.$on("layer-load-end",d)}}}]),angular.module("templates-npnvis",["js/filter/dateFilterTag.html","js/filter/filterControl.html","js/filter/filterTags.html","js/filter/speciesFilterTag.html","js/layers/layerControl.html","js/map/map.html","js/settings/settingsControl.html","js/toolbar/tool.html","js/toolbar/toolbar.html"]),angular.module("js/filter/dateFilterTag.html",[]).run(["$templateCache",function(a){a.put("js/filter/dateFilterTag.html",'<div class="btn-group">\n    <button class="btn btn-default" disabled>\n        {{item.start_date}} - {{item.end_date}} <span class="badge">{{counts | speciesBadge:badgeFormat}}</span>\n    </button>\n    <button class="btn btn-default" ng-click="removeFromFilter(item)">\n        <i class="fa fa-times-circle-o"></i>\n    </button>\n</div>')}]),angular.module("js/filter/filterControl.html",[]).run(["$templateCache",function(a){a.put("js/filter/filterControl.html",'<ul class="list-unstyled">\n    <li>\n        <label for="yearInputForm">Years (at most two)</label>\n        <form id="yearInputForm" name="yearInputForm">\n        <input id="start_date" type="number" class="form-control"\n               max="{{selected.date.end_date || thisYear}}"\n               ng-model="selected.date.start_date"\n               typeahead="year for year in validYears | lte:selected.date.end_date | filter:$viewValue"\n               required placeholder="From" /> - \n        <input id="end_date" type="number" class="form-control"\n                min="{{selected.date.start_date || 2008}}"\n                ng-model="selected.date.end_date"\n                typeahead="year for year in validYears | gte:selected.date.start_date | filter:$viewValue"\n                required placeholder="To" />\n        <button class="btn btn-default"\n                ng-disabled="yearInputForm.$invalid || ((selected.date.end_date - selected.date.start_date) > 2) || filterHasDate()"\n                ng-click="addDateRangeToFilter()"><i class="fa fa-plus"></i></button>\n        </form>\n    </li>\n    <li class="divider" ng-if="filterHasDate()"></li>\n    <li ng-if="filterHasDate()">\n        <label for="species">Species</label>\n        <input id="species"\n               type="text" class="form-control"\n               placeholder="Add Species To Filter"\n               typeahead="sp as sp.$display for sp in findSpecies()  | filter:{common_name:$viewValue} | limitTo:15"\n               typeahead-loading="findingSpecies"\n               ng-model="selected.addSpecies"\n               ng-disabled="findSpeciesParamsEmpty" />\n        <button class="btn btn-default" ng-disabled="!selected.speciesToAdd"\n                ng-click="addSpeciesToFilter(selected.speciesToAdd)">\n            <i class="fa" ng-class="{\'fa-refresh fa-spin\': findingSpecies, \'fa-plus\': !findingSpecies}"></i>\n        </button>\n    </li>\n    <li ng-if="filterHasDate()">\n        <label>Animal Types</label>\n        <div isteven-multi-select\n            max-labels="3"\n            input-model="animalTypes"\n            output-model="speciesInput.animals"\n            button-label="species_type"\n            item-label="species_type"\n            tick-property="selected"\n            orientation="horizontal"\n            helper-elements="all none reset filter"></div>\n    </li>\n    <li ng-if="filterHasDate()">\n        <label>Plant Types</label>\n        <div isteven-multi-select\n            max-labels="3"\n            input-model="plantTypes"\n            output-model="speciesInput.plants"\n            button-label="species_type"\n            item-label="species_type"\n            tick-property="selected"\n            orientation="horizontal"\n            helper-elements="all none reset filter"></div>\n    </li>\n    <li ng-if="filterHasDate()">\n        <label>Partners</label>\n        <div isteven-multi-select\n            max-labels="1"\n            input-model="partners"\n            output-model="speciesInput.networks"\n            button-label="network_name"\n            item-label="network_name"\n            tick-property="selected"\n            orientation="horizontal"\n            selection-mode="single"></div>\n    </li>\n</ul>\n')}]),angular.module("js/filter/filterTags.html",[]).run(["$templateCache",function(a){a.put("js/filter/filterTags.html",'<ul class="list-inline filter-tags">\n    <li ng-repeat="(key, value) in getFilter()">\n        <species-filter-tag ng-if="value.species_id" item="value"></species-filter-tag>\n        <date-filter-tag ng-if ="value.start_date && value.end_date" item="value"></date-filter-tag>\n    </li>\n</ul>')}]),angular.module("js/filter/speciesFilterTag.html",[]).run(["$templateCache",function(a){a.put("js/filter/speciesFilterTag.html",'<div class="btn-group filter-tag" ng-class="{open: status.isopen}">\n    <button type="button" class="btn btn-primary" style="background-color: {{item.color}};" ng-disabled="!item.phenophases" ng-click="status.isopen = !status.isopen">\n        {{item.common_name}} <span class="badge">{{counts | speciesBadge:badgeFormat}}</span> <span class="caret"></span>\n    </button>\n    <ul class="dropdown-menu phenophase-list" role="menu">\n        <li class="inline">Select <a href ng-click="selectAll(true)">all</a> <a href ng-click="selectAll(false)">none</a></li>\n        <li class="divider"></li>\n        <li ng-repeat="phenophase in item.phenophases">\n            <input type="checkbox" ng-model="phenophase.selected"> <span class="badge">{{phenophase.count}}</span> {{phenophase.phenophase_name}}\n        </li>\n    </ul>\n    <button class="btn btn-primary" style="background-color: {{item.color}};" ng-click="removeFromFilter(item)">\n        <i class="fa fa-times-circle-o"></i>\n    </button>\n</div>')}]),angular.module("js/layers/layerControl.html",[]).run(["$templateCache",function(a){a.put("js/layers/layerControl.html",'<ul class="list-unstyled">\n    <li><input type="radio" id="layer-none" ng-model="layerOnMap.layer" value="none"/> <label for="layer-none">None</label></li>\n    <li ng-repeat="layer in layers">\n        <input type="radio" id="layer-{{layer.id}}" ng-model="layerOnMap.layer" ng-value="layer"/> <label for="layer-{{layer.id}}">{{layer.label}}</label>\n        <span ng-if="layer.source">(<a href="{{layer.source}}" target="_blank">Source</a>)</span>\n        <span ng-if="layer.img">\n            <a ng-if="layer.link" href="{{layer.link}}" target="_blank"><img ng-src="{{layer.img}}" /></a>\n            <img ng-if="!layer.link" ng-src="{{layer.img}}" />\n        </span>\n    </li>\n</ul>')}]),angular.module("js/map/map.html",[]).run(["$templateCache",function(a){a.put("js/map/map.html",'<npn-working></npn-working>\n\n<ui-gmap-google-map ng-if="map" center=\'map.center\' zoom=\'map.zoom\' options="map.options">\n    <npn-stations ng-if="stationView"></npn-stations>\n    <npn-filter-results></npn-filter-results>\n</ui-gmap-google-map>\n\n<filter-tags></filter-tags>\n\n<toolbar>\n    <tool id="filter" icon="fa-search" title="Filter">\n        <filter-control></filter-control>\n    </tool>\n    <tool id="layers" icon="fa-bars" title="Layers">\n        <layer-control></layer-control>\n    </tool>\n    <tool id="visualizations" icon="fa-bar-chart" title="Visualizations">\n        visualization content\n    </tool>\n    <tool id="settings" icon="fa-cog" title="Settings">\n        <settings-control></settings-control>\n    </tool>\n</toolbar>')}]),angular.module("js/settings/settingsControl.html",[]).run(["$templateCache",function(a){a.put("js/settings/settingsControl.html",'<ul class="list-unstyled">\n    <li>\n        <Label for="clusterMarkersSetting">Cluster Markers</label>\n        <ul class="list-unstyled">\n            <li ng-repeat="option in [true,false]">\n                <input type="radio" id="clusterMarkers{{option}}" ng-model="settings.clusterMarkers.value"\n                       ng-value="{{option}}" /> <label for="clusterMarkers{{option}}">{{option | yesNo}}</label>\n            </li>\n        </ul>\n    </li>\n    <li class="divider"></li>\n    <li>\n        <label>Species Badge Contents</label>\n        <ul class="list-unstyled">\n            <li ng-repeat="option in settings.tagBadgeFormat.options">\n                <input type="radio"\n                       id="{{option.value}}" ng-model="settings.tagBadgeFormat.value"\n                       value="{{option.value}}"> <label for="{{option.value}}">{{option.label}}</label>\n            </li>\n        </ul>\n\n    </li>\n</ul>')}]),angular.module("js/toolbar/tool.html",[]).run(["$templateCache",function(a){a.put("js/toolbar/tool.html",'<div class="tool-content {{title.toLowerCase()}}" ng-show="selected">\n    <h2>{{title}}</h2>\n    <div ng-transclude>\n    </div>\n</div>')}]),angular.module("js/toolbar/toolbar.html",[]).run(["$templateCache",function(a){a.put("js/toolbar/toolbar.html",'<div class="toolbar">\n  <ul class="tools-list">\n    <li ng-repeat="t in tools" ng-class="{open: t.selected}"\n        popover-placement="right" popover="{{t.title}}" popover-trigger="mouseenter" popover-popup-delay="1000"\n        ng-click="select(t)">\n      <i class="fa {{t.icon}}"></i>\n    </li>\n  </ul>\n  <div class="toolbar-content" ng-class="{open: open}" ng-transclude></div>\n</div>')}]),angular.module("npn-viz-tool.settings",["npn-viz-tool.filters"]).factory("SettingsService",[function(){var a={clusterMarkers:{name:"cluster-markers",value:!0},tagBadgeFormat:{name:"tag-badge-format",value:"observation-count",options:[{value:"observation-count",label:"Observation Count"},{value:"station-count",label:"Station Count"},{value:"station-observation-count",label:"Station Count/Observation Count"}]}};return{getSettings:function(){return a},getSetting:function(b){return a[b]},getSettingValue:function(b){return a[b].value}}}]).directive("settingsControl",["$rootScope","$document","SettingsService",function(a,b,c){return{restrict:"E",templateUrl:"js/settings/settingsControl.html",controller:function(d){function e(b){console.log("broadcastSettingChange",d.settings[b]),a.$broadcast("setting-update-"+b,d.settings[b])}d.settings=c.getSettings(),d.$watch("settings.clusterMarkers.value",function(){e("clusterMarkers")}),d.$watch("settings.tagBadgeFormat.value",function(){e("tagBadgeFormat")}),b.bind("keypress",function(a){(99===a.charCode||"C"===a.key)&&d.$apply(function(){d.settings.clusterMarkers.value=!d.settings.clusterMarkers.value})})}}}]),angular.module("npn-viz-tool.stations",["npn-viz-tool.settings","npn-viz-tool.layers"]).directive("npnStations",["$http","LayerService","SettingsService",function(a,b,c){return{restrict:"E",template:'<ui-gmap-markers models="stations.markers" idKey="\'station_id\'" coords="\'self\'" icon="\'icon\'" options="\'markerOpts\'" doCluster="doCluster"></ui-gmap-markers>',scope:{},controller:["$scope",function(d){d.doCluster=c.getSettingValue("clusterMarkers"),d.$on("setting-update-clusterMarkers",function(a,b){d.doCluster=b.value}),d.stations={states:[],markers:[]};var e=[];a.get("/npn_portal/stations/getStationCountByState.json").success(function(c){var f=c.reduce(function(a,b){return a[b.state]=b,b.number_stations=parseInt(b.number_stations),a.$min=Math.min(a.$min,b.number_stations),a.$max=Math.max(a.$max,b.number_stations),a},{$max:0,$min:0}),g=d3.scale.linear().domain([f.$min,f.$max]).range(["#F7FBFF","#08306B"]);b.resetLayers().then(function(){b.loadLayer("primary-boundaries",function(a){var b=a.getProperty("NAME"),c=-1!=d.stations.states.indexOf(b),e=f[b],h={strokeOpacity:1,strokeColor:"#ffffff",strokeWeight:1,fillOpacity:0};return e&&!c?(e.visited=!0,h.fillOpacity=.8,h.fillColor=g(e.number_stations),h.clickable=!0):c||console.warn("no station count for "+b),h}).then(function(b){var c=b[0];e.push(c.data.addListener("mouseover",function(a){c.data.overrideStyle(a.feature,{strokeWeight:3})})),e.push(c.data.addListener("mouseout",function(){c.data.revertStyle()})),e.push(c.data.addListener("click",function(b){var e=b.feature.getProperty("NAME");-1===d.stations.states.indexOf(e)&&(d.stations.states.push(e),c.panTo(b.latLng),c.setZoom(6),a.get("/npn_portal/stations/getAllStations.json",{params:{state_code:e}}).success(function(a){a.forEach(function(a){a.markerOpts={title:a.station_name}}),d.stations.markers=d.stations.markers.concat(a),c.data.remove(b.feature)}))}))})})}),d.$on("$destroy",function(){b.resetLayers(),e.forEach(function(a){a.remove()})})}]}}]),angular.module("npn-viz-tool.toolbar",[]).directive("toolbar",["$rootScope",function(a){return{restrict:"E",templateUrl:"js/toolbar/toolbar.html",transclude:!0,scope:{},controller:function(b){var c=b.tools=[];b.select=function(c){c.selected=!c.selected,b.open=c.selected,a.$broadcast("tool-"+(c.selected?"open":"close"),{tool:c})},this.addTool=function(a){c.push(a)}}}}]).directive("tool",[function(){return{restrict:"E",require:"^toolbar",templateUrl:"js/toolbar/tool.html",transclude:!0,scope:{id:"@",title:"@",icon:"@"},link:function(a,b,c,d){d.addTool(a)}}}]);