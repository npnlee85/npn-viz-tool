/*
 * Regs-Dot-Gov-Directives
 * Version: 0.1.0 - 2015-04-03
 */
angular.module("npn-viz-tool.vis-calendar",["npn-viz-tool.vis","npn-viz-tool.filter","npn-viz-tool.filters","ui.bootstrap"]).controller("CalendarVisCtrl",["$scope","$modalInstance","$http","$timeout","$filter","FilterService","ChartService",function(a,b,c,d,e,f,g){function h(b){var c=b||a.selection.toPlot;return angular.extend({},c,{color:a.selection.color})}function i(){a.selection.color<19?a.selection.color++:a.selection.color=0}function j(b){for(;;){var c,d=-1;for(c=0;c<a.toPlot.length;c++)if(a.toPlot[c].species_id===b){d=c;break}if(-1===d)break;a.removeFromPlot(d)}}function k(b){console.log("addToPlot",b),b&&(-1===b.phenophase_id?(console.log("add all phenophases..."),j(b.species_id),a.plottable.filter(function(a){return-1!==a.phenophase_id&&a.species_id===b.species_id}).forEach(function(a){k(a)})):(a.toPlot.push(h(b)),i()),a.data=r=void 0)}function l(b){var c=-1*(x.rangeBand()/2+a.yAxisConfig.labelOffset);b.selectAll("text").attr("x",0).attr("dy",c)}function m(){x.rangeBands([t.height,0],a.yAxisConfig.bandPadding,.5),r&&r.labels&&x.domain(d3.range(0,r.labels.length)),y.scale(x),s&&s.selectAll("g .y.axis").call(y).call(l)}function n(a){return r&&r.labels&&a<r.labels.length?r.labels[a]:""}function o(){var a,b=[1],c=1;for(a=1;12>a;a++){var d=new Date(1900,a);d.setTime(d.getTime()-g.ONE_DAY_MILLIS),c+=d.getDate(),b.push(c)}return v.domain().filter(function(a){return-1!==b.indexOf(a)})}function p(a){var b=new Date(1900,0);return b.setTime(b.getTime()+g.ONE_DAY_MILLIS*a),u(b)}function q(){if(r){a.working=!0,v.rangeBands([0,t.width],-.1,.5),w.scale(v),s.selectAll("g .x.axis").call(w),m();var b=s.selectAll(".doy").data(r.data);b.exit().remove(),b.enter().insert("line",":first-child").attr("class","doy");var c=Math.ceil(v.rangeBand()/2),d=x.rangeBand()/2;b.attr("x1",function(a){return v(a.x)-c}).attr("y1",function(a){return x(a.y)+d}).attr("x2",function(a){return v(a.x)+c}).attr("y2",function(a){return x(a.y)+d}).attr("doy-point",function(a){return"("+a.x+","+a.y+")"}).attr("stroke",function(b){return a.colorScale(b.color)}).attr("stroke-width",x.rangeBand()),a.working=!1}}var r,s,t=(f.getFilter().getDateArg(),g.getSizeInfo({top:20,right:30,bottom:35,left:30})),u=d3.time.format("%B"),v=d3.scale.ordinal().rangeBands([0,t.width]).domain(d3.range(1,366)),w=d3.svg.axis().scale(v).orient("bottom").tickValues(o()).tickFormat(p),x=d3.scale.ordinal().rangeBands([t.height,0]).domain(d3.range(0,6)),y=d3.svg.axis().scale(x).orient("right").tickSize(t.width).tickFormat(function(a){return a}).tickFormat(n);a.validYears=d3.range(1900,(new Date).getFullYear()+1),a.modal=b,a.colorScale=f.getColorScale(),a.colors=a.colorScale.domain(),a.selection={color:0,year:(new Date).getFullYear()},a.plottable=[],angular.forEach(f.getFilter().getSpeciesArgs(),function(b){a.plottable.push(angular.extend({},b.arg,{phenophase_id:-1,phenophase_name:"All phenophases"})),angular.forEach(b.phenophases,function(c){a.plottable.push(angular.extend({},b.arg,c))})}),console.log("plottable",a.plottable),a.toPlotYears=[],a.toPlot=[],a.addYear=function(){a.selection.year&&(a.toPlotYears.push(a.selection.year),a.toPlotYears.sort(),a.data=r=void 0)},a.canAddYear=function(){return a.toPlotYears.length<2&&a.selection.year&&-1===a.toPlotYears.indexOf(a.selection.year)&&-1!==a.validYears.indexOf(a.selection.year)},a.removeYear=function(b){a.toPlotYears.splice(b,1),a.data=r=void 0},a.canAddToPlot=function(){if(!a.selection.toPlot)return!1;if(0===a.toPlot.length)return!0;var b,c=h();for(b=0;b<a.toPlot.length;b++)if(angular.equals(a.toPlot[b],c))return!1;for(b=0;b<a.toPlot.length;b++)if(c.color===a.toPlot[b].color)return!1;return!0},d(function(){s=d3.select(".chart").attr("width",t.width+t.margin.left+t.margin.right).attr("height",t.height+t.margin.top+t.margin.bottom).append("g").attr("transform","translate("+t.margin.left+","+t.margin.top+")"),s.append("g").attr("class","x axis").attr("transform","translate(0,"+t.height+")").call(w),s.append("g").attr("class","y axis").call(y).call(l)},500),a.addToPlot=function(){k(a.selection.toPlot)},a.removeFromPlot=function(b){a.toPlot.splice(b,1),a.data=r=void 0},a.yAxisConfig={labelOffset:2,bandPadding:.5},a.$watch("yAxisConfig.labelOffset",q),a.$watch("yAxisConfig.bandPadding",q),a.incrBandPadding=function(){var b=a.yAxisConfig.bandPadding+.05;a.yAxisConfig.bandPadding=Number(b.toFixed(2))},a.decrBandPadding=function(){var b=a.yAxisConfig.bandPadding-.05;a.yAxisConfig.bandPadding=Number(b.toFixed(2))},a.visualize=function(){if(r)return q();a.working=!0,console.log("visualize",a.selection.axis,a.toPlot);var b=(f.getFilter().getDateArg(),{request_src:"npn-vis-calendar"}),c={};a.toPlotYears.forEach(function(a,c){b["year["+c+"]"]=a}),angular.forEach(a.toPlot,function(a,d){c[a.species_id+"."+a.phenophase_id]=a.color,b["species_id["+d+"]"]=a.species_id,b["phenophase_id["+d+"]"]=a.phenophase_id}),g.getPositiveDates(b,function(b){var c={},d={labels:[],data:[]},f=a.toPlot.length*a.toPlotYears.length-1;angular.forEach(b,function(a){c[a.species_id]=a;var b={};angular.forEach(a.phenophases,function(a){if(b[a.phenophase_id]=a,angular.isArray(a.years)){var c,d={};angular.forEach(a.years,function(a){c=Object.keys(a),c.length>1?console.warn("year array member with multiple keys?",a):1===c.length&&(d[c[0]]=a[c[0]])}),a.years=d}else{var e=function(a){return parseInt(a)};for(var f in a.years){var g=a.years[f].map(e);console.log("before.after",a.years[f],g),a.years[f]=g}for(var h=Object.keys(a.years),i=0;i<h.length;i++){var j=a.years[h[i]];delete a.years[h[i]],a.years[h[i].trim()]=j}}}),a.phenophases=b}),console.log("speciesMap",c),angular.forEach(a.toPlot,function(b){console.log("toPlot",b);var g=c[b.species_id],h=g.phenophases[b.phenophase_id];angular.forEach(a.toPlotYears,function(a){if(h){var c=h.years[a];console.log("year",f,a,g.common_name,h,c),angular.forEach(c,function(a){d.data.push({y:f,x:a,color:b.color})})}d.labels.splice(0,0,e("speciesTitle")(b)+"/"+b.phenophase_name+" ("+a+")"),console.log("y of "+f+" is for "+d.labels[0]),f--})}),a.data=r=d,console.log("calendar data",r),q()})}}]),angular.module("npn-viz-tool.filter",["npn-viz-tool.settings","isteven-multi-select"]).factory("FilterArg",[function(){var a=function(a){this.arg=a};return a.prototype.getArg=function(){return this.arg},a.prototype.$filter=function(){return!0},a}]).factory("DateFilterArg",["FilterArg",function(a){var b=function(b){b&&(b.start_date&&"number"!=typeof b.start_date&&(b.start_date=parseInt(b.start_date)),b.end_date&&"number"!=typeof b.end_date&&(b.end_date=parseInt(b.end_date))),a.apply(this,arguments)};return b.prototype.getId=function(){return"date"},b.prototype.getStartDate=function(){return this.arg.start_date+"-01-01"},b.prototype.getEndDate=function(){return this.arg.end_date+"-12-31"},b.prototype.toString=function(){return this.arg.start_date+"-"+this.arg.end_date},b.fromString=function(a){var c=a.indexOf("-");return new b({start_date:a.substring(0,c),end_date:a.substring(c+1)})},b}]).factory("NetworkFilterArg",["$http","$rootScope","FilterArg","SpeciesFilterArg",function(a,b,c,d){var e=function(){c.apply(this,arguments),this.counts={station:"?",observation:"?"},this.stations=[];var a=this;b.$broadcast("network-filter-ready",{filter:a})};return e.prototype.getId=function(){return parseInt(this.arg.network_id)},e.prototype.toString=function(){return this.arg.network_id},e.prototype.resetCounts=function(a){this.counts.station=this.counts.observation=a,this.stations=[]},e.prototype.updateCounts=function(a,b){var c,e=this.getId();if(-1!==a.networks.indexOf(e)){-1===this.stations.indexOf(a.station_id)&&(this.stations.push(a.station_id),this.counts.station++);for(c in b)b[c].$match&&(this.counts.observation+=d.countObservationsForPhenophase(b[c]))}},e.fromString=function(b){return a.get("/npn_portal/networks/getPartnerNetworks.json",{params:{active_only:!0}}).then(function(a){for(var c=a.data,d=0;c&&d<c.length;d++)if(b===c[d].network_id)return new e(c[d]);console.warn("NO NETWORK FOUND WITH ID "+b)})},e}]).factory("SpeciesFilterArg",["$http","$rootScope","FilterArg",function(a,b,c){var d=function(d,e){c.apply(this,arguments),this.counts={station:"?",observation:"?"},e&&"*"!=e&&(this.phenophaseSelections=e.split(","));var f=this;a.get("/npn_portal/phenophases/getPhenophasesForSpecies.json",{params:{return_all:!0,species_id:f.arg.species_id}}).success(function(a){var c={};f.phenophases=a[0].phenophases.filter(function(a){return c[a.phenophase_id]?!1:(c[a.phenophase_id]=a,a.selected=!f.phenophaseSelections||-1!=f.phenophaseSelections.indexOf(a.phenophase_id),!0)}),f.phenophasesMap={},angular.forEach(f.phenophases,function(a){f.phenophasesMap[a.phenophase_id]=a}),b.$broadcast("species-filter-ready",{filter:f})})};return d.countObservationsForPhenophase=function(a){var b=0;return a.y&&(b+=a.y),a.n&&(b+=a.n),a.q&&(b+=a.q),b},d.prototype.getId=function(){return parseInt(this.arg.species_id)},d.prototype.resetCounts=function(a){this.counts.station=this.counts.observation=a,angular.forEach(this.phenophases,function(a){a.count=0})},d.prototype.$filter=function(a){var b=this,c=0,e=Object.keys(a).filter(function(e){var f=d.countObservationsForPhenophase(a[e]);return b.phenophasesMap[e].count+=f,a[e].$match=b.phenophasesMap[e].selected,a[e].$match&&(c+=f),a[e].$match});return e.length>0&&b.counts.station++,b.counts.observation+=c,c},d.prototype.toString=function(){var a=this.arg.species_id+":",b=this.phenophases.filter(function(a){return a.selected});return b.length===this.phenophases.length?a+="*":b.forEach(function(b,c){a+=(c>0?",":"")+b.phenophase_id}),a},d.fromString=function(b){var c=b.indexOf(":"),e=b.substring(0,c),f=b.substring(c+1);return a.get("/npn_portal/species/getSpeciesById.json",{params:{species_id:e}}).then(function(a){return a.data.species_id=e,new d(a.data,f)})},d}]).factory("GeoFilterArg",["FilterArg",function(a){function b(a,c){var d,e,f,g=c.getType();if("Polygon"==g)return d=new google.maps.Polygon({paths:c.getArray()[0].getArray()}),google.maps.geometry.poly.containsLocation(a,d)||google.maps.geometry.poly.isLocationOnEdge(a,d);if("MultiPolygon"===g||"GeometryCollection"==g)for(e=c.getArray(),f=0;f<e.length;f++)if(b(a,e[f]))return!0;return!1}var c=function(b,c){a.apply(this,arguments),this.sourceId=c};return c.prototype.getId=function(){return this.arg.getProperty("NAME")},c.prototype.getSourceId=function(){return this.sourceId},c.prototype.$filter=function(a){return b(new google.maps.LatLng(parseFloat(a.latitude),parseFloat(a.longitude)),this.arg.getGeometry())},c.prototype.toString=function(){return this.sourceId+":"+this.arg.getProperty("NAME")},c}]).factory("NpnFilter",["DateFilterArg","SpeciesFilterArg","NetworkFilterArg","GeoFilterArg",function(a,b,c,d){function e(a){var b,c=[];for(b in a)c.push(a[b]);return c}var f=function(){this.reset()};return f.prototype.hasDate=function(){return!!this.date},f.prototype.hasCriteria=function(){return this.date?!0:Object.keys(this.species).length>0||Object.keys(this.networks).length>0},f.prototype.hasSufficientCriteria=function(){return this.date&&(Object.keys(this.species).length>0||Object.keys(this.networks).length>0)},f.prototype.getUpdateCount=function(){return this.updateCount},f.prototype.getDateArg=function(){return this.date},f.prototype.getSpeciesArg=function(a){return this.species[a]},f.prototype.getSpeciesArgs=function(){return e(this.species)},f.prototype.getNetworkArg=function(a){return this.networks[a]},f.prototype.getNetworkArgs=function(){return e(this.networks)},f.prototype.getCriteria=function(){var a=e(this.species);return this.date&&a.append(this.date),a},f.prototype.getGeoArgs=function(){return e(this.geo)},f.prototype.add=function(e){return this.updateCount++,e instanceof a?this.date=e:e instanceof b?this.species[e.getId()]=e:e instanceof c?this.networks[e.getId()]=e:e instanceof d&&(this.geo[e.getId()]=e),!(e instanceof d)},f.prototype.remove=function(e){return this.updateCount++,e instanceof a?(this.date=void 0,this.species={}):e instanceof b?delete this.species[e.getId()]:e instanceof c?delete this.networks[e.getId()]:e instanceof d&&delete this.geo[e.getId()],!(e instanceof d)},f.prototype.reset=function(){this.updateCount=0,this.date=void 0,this.species={},this.geo={},this.networks={}},f}]).factory("FilterService",["$q","$http","$rootScope","$timeout","uiGmapGoogleMapApi","NpnFilter","SpeciesFilterArg",function(a,b,c,d,e,f,g){function h(){if(u.hasCriteria()){var a={},b=u.getDateArg();return b&&(a.start_date=b.getStartDate(),a.end_date=b.getEndDate()),u.getSpeciesArgs().forEach(function(b,c){a["species_id["+c+"]"]=b.getId()}),u.getNetworkArgs().forEach(function(b,c){a["network_id["+c+"]"]=b.getId()}),a}}function i(a){var b=Date.now();c.$broadcast("filter-phase2-start",{count:a.length});var d=0,e=u.getGeoArgs(),f=u.getSpeciesArgs().length>0,h=u.getNetworkArgs(),i=function(a,b){h.length&&angular.forEach(h,function(c){c.updateCounts(a,b)})},j=a.filter(function(a){a.markerOpts.icon.fillColor=w.fillColor;var b,c,h,j,k,l=0,m={};if(e.length>0){var n=!1;for(b=0;b<e.length&&!(n=e[b].$filter(a));b++);if(!n)return!1}a.observationCount=0;for(c in a.species)if(h=u.getSpeciesArg(c),m[c]=0,h||!f){if(h&&(j=h.$filter(a.species[c])))d+=j,a.observationCount+=j,m[c]++,l++,1===l&&(a.markerOpts.icon.fillColorIdx=h.colorIdx,a.markerOpts.icon.fillColor=h.color),i(a,a.species[c]);else if(!h){for(k in a.species[c])a.species[c][k].$match=!0,d+=g.countObservationsForPhenophase(a.species[c][k]);l++,i(a,a.species[c])}}else console.warn("species found in results but not in filter",a.species[c]);m.n=0;for(c in m)"n"!=c&&m[c]>0&&m.n++;return a.markerOpts.icon.strokeColor=m.n>1?"#00ff00":w.strokeColor,a.$markerKey=a.station_id+"."+a.markerOpts.icon.fillColor+"."+a.markerOpts.icon.strokeColor,l>0}).map(function(a){return{$markerKey:a.$markerKey,latitude:a.latitude,longitude:a.longitude,markerOpts:a.markerOpts,station_id:a.station_id,station_name:a.station_name,observationCount:a.observationCount}});return u.getSpeciesArgs().forEach(function(a){var b=j.filter(function(b){return a.colorIdx===b.markerOpts.icon.fillColorIdx}),c=d3.min(b,function(a){return a.observationCount}),d=d3.max(b,function(a){return a.observationCount});if(c!==d){console.log("there is variability in observationCounts",c,d),console.log("arg markers",a,b);var e=t[a.colorIdx];e.domain([c,d]),b.forEach(function(a){a.markerOpts.icon.fillColor=e(a.observationCount),a.$markerKey=a.station_id+"."+a.markerOpts.icon.fillColor+"."+a.markerOpts.icon.strokeColor})}}),c.$broadcast("filter-phase2-end",{station:j.length,observation:d}),console.log("phase2 time:",Date.now()-b),x=j}function j(){var d=a.defer(),e=h();if(!v&&e&&n!=u.getUpdateCount()){n=u.getUpdateCount();var f=Date.now();console.log("execute",n,e),c.$broadcast("filter-phase1-start",{}),b.get("/npn_portal/observations/getAllObservationsForSpecies.json",{params:e}).success(function(a){angular.forEach(a.station_list,function(a){a.markerOpts={title:a.station_name,icon:angular.extend({},w)}}),c.$broadcast("filter-phase1-end",{count:a.station_list.length}),console.log("phase1 time:",Date.now()-f),console.log("results-pre",a),d.resolve(i(o=a.station_list))})}else d.resolve(x);return d.promise}function k(){v||c.$broadcast("filter-update",{})}function l(){x=[],c.$broadcast("filter-reset",{})}function m(){u.getSpeciesArgs().forEach(function(a,b){a.colorIdx=b,a.color=s(b)})}var n,o,p=d3.range(0,20),q=d3.scale.category20().domain(p),r=d3.scale.category20b().domain(p),s=d3.scale.ordinal().domain(p).range(p.map(function(a,b){return b%2===0?q(b):r(b-1)})),t=p.map(function(a){var b=s(a),c=d3.rgb(b).hsl().brighter(1.25).rgb().toString();return d3.scale.linear().range([c,b])}),u=new f,v=!1,w={fillColor:"#00ff00",fillOpacity:.95,scale:8,strokeColor:"#204d74",strokeWeight:1},x=[];return e.then(function(a){w.path=a.SymbolPath.CIRCLE}),c.$on("filter-rerun-phase2",function(){v||d(function(){if(o){var a=i(o);c.$broadcast("filter-marker-updates",{markers:a})}},500)}),{execute:j,getFilteredMarkers:function(){return x},pause:function(){console.log("PAUSE"),v=!0},resume:function(){console.log("RESUME"),v=!1,k()},getFilter:function(){return u},hasFilterChanged:function(){return n!==u.getUpdateCount()},isFilterEmpty:function(){return!u.hasCriteria()},hasDate:function(){return u.hasDate()},hasSufficientCriteria:function(){return u.hasSufficientCriteria()},addToFilter:function(a){u.add(a)&&(m(),k())},removeFromFilter:function(a){u.remove(a)&&(u.hasCriteria()?k():l())},resetFilter:function(){u.reset(),l()},getColorScale:function(){return s}}}]).directive("npnFilterResults",["$rootScope","$http","$timeout","FilterService","SettingsService",function(a,b,c,d,e){return{restrict:"E",template:'<ui-gmap-markers models="results.markers" idKey="\'$markerKey\'" coords="\'self\'" icon="\'icon\'" options="\'markerOpts\'" doCluster="doCluster"></ui-gmap-markers>',scope:{},controller:function(a){function b(){d.hasFilterChanged()&&d.hasSufficientCriteria()&&c(function(){a.results.markers=[],c(function(){d.execute().then(function(b){console.log("markers",b),a.results.markers=b})},500)},500)}var f=!1;a.results={markers:[]},a.doCluster=e.getSettingValue("clusterMarkers"),a.$on("setting-update-clusterMarkers",function(b,c){a.doCluster=c.value}),a.$on("tool-open",function(a,b){f="filter"===b.tool.id}),a.$on("tool-close",function(a,c){"filter"===c.tool.id&&(f=!1,b())}),a.$on("filter-update",function(){f||b()}),a.$on("filter-reset",function(){a.results.markers=[]}),a.$on("filter-marker-updates",function(b,c){console.log("update data",c),a.results.markers=c.markers})}}}]).directive("filterTags",["FilterService",function(a){return{restrict:"E",templateUrl:"js/filter/filterTags.html",scope:{},controller:function(b){b.getFilter=a.getFilter}}}]).filter("speciesBadge",function(){return function(a,b){return"observation-count"===b?a.observation:"station-count"===b?a.station:"station-observation-count"===b?a.station+"/"+a.observation:a}}).filter("speciesTitle",["SettingsService",function(a){return function(b,c){var d=c||a.getSettingValue("tagSpeciesTitle");if("common-name"===d){if(b.common_name){var e=b.common_name.toLowerCase();return e.substring(0,1).toUpperCase()+e.substring(1)}return b.common_name}return"scientific-name"===d?b.genus+" "+b.species:b}}]).directive("speciesFilterTag",["$rootScope","FilterService","SettingsService","SpeciesFilterArg",function(a,b,c){return{restrict:"E",require:"^filterTags",templateUrl:"js/filter/speciesFilterTag.html",scope:{arg:"="},controller:function(d){d.titleFormat=c.getSettingValue("tagSpeciesTitle"),d.$on("setting-update-tagSpeciesTitle",function(a,b){d.titleFormat=b.value}),d.badgeFormat=c.getSettingValue("tagBadgeFormat"),d.badgeTooltip=c.getSettingValueLabel("tagBadgeFormat"),d.$on("setting-update-tagBadgeFormat",function(a,b){d.badgeFormat=b.value,d.badgeTooltip=c.getSettingValueLabel("tagBadgeFormat")}),d.$on("filter-phase2-start",function(){d.arg.resetCounts(0)}),d.$on("filter-phase1-start",function(){d.arg.resetCounts("?")}),d.removeFromFilter=b.removeFromFilter,d.status={isopen:!1},d.hasCount=function(a){return a.count>0};var e;d.$watch("status.isopen",function(){if(d.status.isopen)e=d.arg.phenophases.map(function(a){return a.selected});else if(e)for(var b=0;b<e.length;b++)if(e[b]!=d.arg.phenophases[b].selected){a.$broadcast("filter-rerun-phase2",{});break}}),d.selectAll=function(a){angular.forEach(d.arg.phenophases,function(b){b.selected=a})}}}}]).directive("dateFilterTag",["FilterService","SettingsService",function(a,b){return{restrict:"E",require:"^filterTags",templateUrl:"js/filter/dateFilterTag.html",scope:{arg:"="},controller:function(c){c.badgeFormat=b.getSettingValue("tagBadgeFormat"),c.badgeTooltip=b.getSettingValueLabel("tagBadgeFormat"),c.$on("setting-update-tagBadgeFormat",function(a,d){c.badgeFormat=d.value,c.badgeTooltip=b.getSettingValueLabel("tagBadgeFormat")}),c.removeFromFilter=a.removeFromFilter,c.counts={station:"?",observation:"?"},c.$on("filter-phase1-start",function(){c.counts.station=c.counts.observation="?"}),c.$on("filter-phase2-start",function(){c.counts.station=c.counts.observation=0}),c.$on("filter-phase2-end",function(a,b){c.counts=b})}}}]).directive("networkFilterTag",["FilterService","SettingsService",function(a,b){return{restrict:"E",require:"^filterTags",templateUrl:"js/filter/networkFilterTag.html",scope:{arg:"="},controller:function(c){c.badgeFormat=b.getSettingValue("tagBadgeFormat"),c.badgeTooltip=b.getSettingValueLabel("tagBadgeFormat"),c.$on("setting-update-tagBadgeFormat",function(a,d){c.badgeFormat=d.value,c.badgeTooltip=b.getSettingValueLabel("tagBadgeFormat")}),c.removeFromFilter=a.removeFromFilter,c.$on("filter-phase1-start",function(){c.arg.resetCounts("?")}),c.$on("filter-phase2-start",function(){c.arg.resetCounts(0)})}}}]).directive("filterControl",["$http","$filter","$timeout","FilterService","DateFilterArg","SpeciesFilterArg","NetworkFilterArg",function(a,b,c,d,e,f,g){return{restrict:"E",templateUrl:"js/filter/filterControl.html",controller:["$scope",function(h){function i(){var a={},b=0;angular.forEach([].concat(h.speciesInput.animals).concat(h.speciesInput.plants),function(c){a["group_ids["+b++ +"]"]=c.species_type_id}),b=0,angular.forEach(h.speciesInput.networks,function(c){a["network_id["+b++ +"]"]=c.network_id}),l=a,h.findSpeciesParamsEmpty=0===Object.keys(a).length,n=!0}h.addDateRangeToFilter=function(){d.addToFilter(new e(h.selected.date))},h.filterHasDate=d.hasDate,h.filterHasSufficientCriteria=d.hasSufficientCriteria;var j=(new Date).getYear()+1900,k=d3.range(1900,j+1);h.thisYear=j,h.validYears=k,h.selected={date:{start_date:j-1,end_date:j},species:[]},h.addNetworksToFilter=function(){angular.forEach(h.speciesInput.networks,function(a){d.addToFilter(new g(a))})},h.addSpeciesToFilter=function(){angular.forEach(h.selected.species,function(a){d.addToFilter(new f(a))})},h.speciesInput={animals:[],plants:[],networks:[]},h.findSpeciesParamsEmpty=!0;var l,m,n=!0;h.$watch("speciesInput.animals",i),h.$watch("speciesInput.plants",i),h.$watch("speciesInput.networks",i),h.findSpecies=function(){n&&(n=!1,angular.forEach(h.selected.species,function(a){a.selected=!1}),h.selected.species=[],h.findSpeciesParamsEmpty&&m&&m.length?h.speciesList=m:(h.findingSpecies=!0,h.serverResults=a.get("/npn_portal/species/getSpeciesFilter.json",{params:l}).then(function(a){var d=[];angular.forEach(a.data,function(a){a.number_observations=parseInt(a.number_observations),a.display=b("speciesTitle")(a)+" ("+a.number_observations+")",d.push(a)});var e=h.speciesList=d.sort(function(a,b){return a.number_observations<b.number_observations?1:a.number_observations>b.number_observations?-1:0});return h.findSpeciesParamsEmpty&&(m=e),c(function(){h.findingSpecies=!1},250),e})))},h.$on("setting-update-tagSpeciesTitle",function(){c(function(){angular.forEach(h.speciesList,function(a){a.display=b("speciesTitle")(a)+" ("+a.number_observations+")"})},250)}),a.get("/npn_portal/networks/getPartnerNetworks.json?active_only=true").success(function(a){angular.forEach(a,function(a){a.network_name=a.network_name.trim()}),h.partners=a}),a.get("/npn_portal/species/getPlantTypes.json").success(function(a){h.plantTypes=a}),a.get("/npn_portal/species/getAnimalTypes.json").success(function(a){h.animalTypes=a}),h.findSpecies()}]}}]),angular.module("npn-viz-tool.filters",[]).filter("cssClassify",function(){return function(a){return"string"==typeof a?a.trim().toLowerCase().replace(/\s+/g,"-"):a}}).filter("yesNo",function(){return function(a){return a?"Yes":"No"}}).filter("gte",function(){return function(a,b){return b&&angular.isArray(a)?a.filter(function(a){return a>=b}):a}}).filter("lte",function(){return function(a,b){return b&&angular.isArray(a)?a.filter(function(a){return b>=a}):a}}).filter("trim",function(){return function(a){return angular.isString(a)?a.trim():a}}).filter("faFileIcon",function(){var a={pdf:"fa-file-pdf-o"};return function(b){return b&&!a[b]&&console.debug("no explicit file type icon for "+b),a[b]||"fa-file-o"}}).filter("ellipses",function(){return function(a){var b=2==arguments.length?arguments[1]:55;return"string"==typeof a&&a.length>b?a.substring(0,b)+" ...":a}}),angular.module("npn-viz-tool.layers",["npn-viz-tool.filter","ngResource"]).factory("LayerService",["$rootScope","$http","$q","uiGmapIsReady",function(a,b,c,d){function e(a){if(!a.properties.CENTER){var b,c,d,e,f,g,h=a.geometry,i="Polygon"===h.type?h.coordinates[0]:h.coordinates.reduce(function(a,b){return a.concat(b[0])},[]);for(b=0;b<i.length;b++)c=i[b],0===b?(f=g=c[0],d=e=c[1]):(f=Math.max(f,c[0]),g=Math.min(g,c[0]),d=Math.max(d,c[1]),e=Math.min(e,c[1]));a.properties.CENTER={latitude:e+(d-e)/2,longitude:g+(f-g)/2}}}function f(d){var f=c.defer();return d.data?f.resolve(d):(a.$broadcast("layer-load-start",{}),b.get("layers/"+d.file).success(function(b){"GeometryCollection"===b.type&&(console.log("Translating GeometryCollection to FeatureCollection"),b.features=[],angular.forEach(b.geometries,function(a,c){b.features.push({type:"Feature",properties:{NAME:""+c},geometry:a})}),b.type="FeatureCollection",delete b.geometries),b.features.forEach(e),d.data=b,f.resolve(d),a.$broadcast("layer-load-end",{})})),f.promise}function g(){j.data.setStyle(function(a){var b=a.getProperty("$style");return b&&"function"==typeof b?b(a):b?angular.extend(l,b):l})}function h(a){if(a.loaded){for(var b=[],c=0;c<a.loaded.length;c++)a.loaded[c].removeProperty("$style"),j.data.remove(a.loaded[c]),b.push(a.loaded[c]);return delete a.loaded,b}}var i=null,j=null,k=d.promise(1).then(function(a){return j=a[0].map,console.log("LayerService - map is ready"),b.get("layers/layers.json").success(function(a){i={},a.forEach(function(a,b){a.index=b,i[a.id]=a}),console.log("LayerService - layer list is loaded",i)})}),l={strokeColor:"#ffffff",strokeOpacity:null,strokeWeight:1,fillColor:"#c0c5b8",fillOpacity:null};return{getAvailableLayers:function(){var a=c.defer();return k.then(function(){var b,c,d=[];for(b in i)c=i[b],d.push({id:c.id,index:c.index,label:c.label,source:c.source,img:c.img,link:c.link});a.resolve(d.sort(function(a,b){return a.idx-b.idx}))}),a.promise},restyleLayers:function(){var a=c.defer();return k.then(function(){g(),a.resolve()}),a.promise},resetLayers:function(){var a=c.defer();return k.then(function(){for(var b in i)h(i[b]);a.resolve()}),a.promise},loadLayer:function(a,b){var d=c.defer();return k.then(function(){var c=i[a];return c?void f(c).then(function(){c.style=b,c.loaded=j.data.addGeoJson(c.data),c.loaded.forEach(function(a){a.setProperty("$style",b)}),g(),d.resolve([j,c.loaded])}):(console.log("no such layer with id",a),d.reject(a))}),d.promise},unloadLayer:function(a){var b=c.defer();return k.then(function(){var c=i[a];if(!c)return console.log("no such layer with id",a),b.reject(a);var d=h(c);b.resolve(d)}),b.promise}}}]).directive("layerControl",["$rootScope","$q","$location","LayerService","FilterService","GeoFilterArg",function(a,b,c,d,e,f){return{restrict:"E",templateUrl:"js/layers/layerControl.html",controller:function(g){function h(){g.layerOnMap={layer:"none"}}function i(b,c){var h=(b.getProperty("NAME"),b.getProperty("$FILTER"));k=b,h?(e.removeFromFilter(h),h=null):(h=new f(b,g.layerOnMap.layer.id),e.addToFilter(h),c.data.overrideStyle(b,{fillColor:"#800000"})),b.setProperty("$FILTER",h),d.restyleLayers().then(function(){e.isFilterEmpty()||a.$broadcast("filter-rerun-phase2",{})})}function j(a){var c=b.defer();return"none"===a?c.resolve(null):(d.loadLayer(a.id,function(a){var b={strokeOpacity:1,strokeColor:"#ffffff",strokeWeight:1,fillOpacity:0};return a.getProperty("$FILTER")&&(b.fillColor="#800000",b.fillOpacity=.5),b}).then(function(a){if(!l.length){var b=a[0];g.$on("filter-phase2-end",function(){if(k){var a=k.getProperty("CENTER");b.panTo(new google.maps.LatLng(a.latitude,a.longitude)),k=null}}),l.push(b.data.addListener("mouseover",function(a){b.data.overrideStyle(a.feature,{strokeWeight:3})})),l.push(b.data.addListener("mouseout",function(){b.data.revertStyle()})),l.push(b.data.addListener("click",function(a){g.$apply(function(){i(a.feature,b)})}))}c.resolve(a)}),c.promise)}var k,l=[];h(),g.$on("filter-reset",h),d.getAvailableLayers().then(function(b){function d(){a.$broadcast("layers-ready",{})}console.log("av.layers",b),g.layers=b;var e=c.search();if(e.g){console.log("init layers from query arg",e.g);var f,h,k=e.g.split(";"),l=k.map(function(a){return a.substring(a.indexOf(":")+1)}),m=k[0].substring(0,k[0].indexOf(":"));for(h=0;h<b.length;h++)if(b[h].id===m){f=b[h];break}f&&j(f).then(function(a){var b=a[0],c=a[1];g.layerOnMap.skipLoad=!0,g.layerOnMap.layer=f,c.forEach(function(a){-1!=l.indexOf(a.getProperty("NAME"))&&i(a,b)}),d()})}else d()}),g.$watch("layerOnMap.layer",function(b,c){return g.layerOnMap.skipLoad?void(g.layerOnMap.skipLoad=!1):void(c&&"none"!=c?d.unloadLayer(c.id).then(function(c){var d=e.getFilter().getGeoArgs(),f=d.length>0;d.forEach(function(a){e.removeFromFilter(a)}),c.forEach(function(a){a.setProperty("$FILTER",null)}),f&&!e.isFilterEmpty()&&a.$broadcast("filter-rerun-phase2",{}),j(b)}):b&&j(b))}),g.$on("$destroy",function(){d.resetLayers(),l.forEach(function(a){a.remove()})})}}}]),angular.module("npn-viz-tool",["templates-npnvis","npn-viz-tool.map","uiGmapgoogle-maps","ui.bootstrap","ngAnimate"]).config(function(a){a.configure({v:"3.17",libraries:"geometry"})}),angular.module("npn-viz-tool.map",["npn-viz-tool.layers","npn-viz-tool.stations","npn-viz-tool.toolbar","npn-viz-tool.filter","npn-viz-tool.settings","npn-viz-tool.vis","npn-viz-tool.share","uiGmapgoogle-maps"]).directive("npnVizMap",["$location","$timeout","uiGmapGoogleMapApi","uiGmapIsReady","FilterService",function(a,b,c,d,e){return{restrict:"E",templateUrl:"js/map/map.html",scope:{},controller:["$scope",function(f){function g(){f.stationView=!1}function h(){i&&(i.panTo(new google.maps.LatLng(j.latitude,j.longitude)),i.setZoom(4)),f.stationView=!0}var i,j={latitude:38.8402805,longitude:-97.61142369999999},k=4;f.stationView=!1,c.then(function(a){console.log("maps",a),f.map={center:j,zoom:k,options:{streetViewControl:!1,panControl:!1,zoomControl:!0,zoomControlOptions:{style:a.ZoomControlStyle.SMALL,position:a.ControlPosition.RIGHT_TOP}}}}),d.promise(1).then(function(b){i=b[0].map;var c=a.search();f.stationView=!c.d&&!c.s}),f.$on("tool-open",function(a,b){"layers"===b.tool.id&&g()}),f.$on("filter-phase1-start",g),f.$on("filter-reset",h),f.reset=function(){f.stationView?(f.stationView=!1,b(h,500)):e.resetFilter()}}]}}]).directive("npnWorking",["uiGmapIsReady",function(a){return{restrict:"E",template:'<div id="npn-working" ng-show="working"><i class="fa fa-circle-o-notch fa-spin fa-5x"></i></div>',scope:{},controller:function(b){function c(){b.working=!0}function d(){b.working=!1}c(),a.promise(1).then(d),b.$on("filter-phase1-start",c),b.$on("filter-phase2-start",c),b.$on("filter-rerun-phase2",c),b.$on("filter-phase2-end",d),b.$on("layer-load-start",c),b.$on("layer-load-end",d)}}}]),angular.module("templates-npnvis",["js/calendar/calendar.html","js/filter/dateFilterTag.html","js/filter/filterControl.html","js/filter/filterTags.html","js/filter/networkFilterTag.html","js/filter/speciesFilterTag.html","js/layers/layerControl.html","js/map/map.html","js/scatter/scatter.html","js/settings/settingsControl.html","js/toolbar/tool.html","js/toolbar/toolbar.html","js/vis/visControl.html","js/vis/visDialog.html"]),angular.module("js/calendar/calendar.html",[]).run(["$templateCache",function(a){a.put("js/calendar/calendar.html",'<vis-dialog title="Calendar" modal="modal">\n<form class="form-inline plot-criteria-form">\n    <div class="form-group">\n        <label for="yearsOneInput">Select up to two years</label>\n        <input id="yearsOneInput" type="number" class="form-control"\n               ng-model="selection.year"\n               typeahead="year for year in validYears | filter:$viewValue"\n               required placeholder="Year" />\n        <button class="btn btn-default" ng-click="addYear()" ng-disabled="!canAddYear()"><i class="fa fa-plus"></i></button>\n    </div>\n    <div class="form-group animated-show-hide">\n        <label for="toPlotInput">Species phenophase combinations</label>\n        <select name="toPlotInput" class="form-control" ng-model="selection.toPlot" ng-options="o.phenophase_name group by (o|speciesTitle) for o in plottable"></select>\n        <div class="btn-group" dropdown is-open="selection.color_isopen">\n          <button type="button" class="btn btn-default dropdown-toggle" dropdown-toggle style="background-color: {{colorScale(selection.color)}};">\n            &nbsp; <span class="caret"></span>\n          </button>\n          <ul class="dropdown-menu" role="menu">\n            <li ng-repeat="i in colors track by $index" style="background-color: {{colorScale($index)}};"><a href ng-click="selection.color=$index;">&nbsp;</a></li>\n          </ul>\n        </div>\n        <button class="btn btn-default" ng-click="addToPlot()" ng-disabled="!canAddToPlot()"><i class="fa fa-plus"></i></button>\n    </div>\n</form>\n\n<div class="panel panel-default main-vis-panel" >\n    <div class="panel-body">\n        <center>\n        <ul class="to-plot list-inline animated-show-hide" ng-if="toPlot.length || toPlotYears.length">\n            <li class="criteria" ng-repeat="y in toPlotYears">{{y}}\n                <a href ng-click="removeYear($index)"><i class="fa fa-times-circle-o"></i></a>\n            </li>\n            <li class="criteria" ng-repeat="tp in toPlot">{{tp|speciesTitle}}/{{tp.phenophase_name}} <i style="color: {{colorScale(tp.color)}};" class="fa fa-circle"></i>\n                <a href ng-click="removeFromPlot($index)"><i class="fa fa-times-circle-o"></i></a>\n            </li>\n            <li ng-if="!data && toPlotYears.length && toPlot.length"><button class="btn btn-primary" ng-click="visualize()">Visualize</button></li>\n        </ul>\n        <div id="vis-container">\n            <div id="vis-working" ng-show="working"><i class="fa fa-circle-o-notch fa-spin fa-5x"></i></div>\n            <svg class="chart"></svg>\n        </div>\n        </center>\n        <ul class="list-inline calendar-chart-controls" ng-if="data" style="float: right;">\n            <li>Label Position\n                <a href class="btn btn-default btn-xs" ng-click="yAxisConfig.labelOffset=(yAxisConfig.labelOffset-1)"><i class="fa fa-minus"></i></a>\n                <a href class="btn btn-default btn-xs" ng-click="yAxisConfig.labelOffset=(yAxisConfig.labelOffset+1)"><i class="fa fa-plus"></i></a>\n            </li>\n            <li>Band Size\n                <a href class="btn btn-default btn-xs" ng-click="incrBandPadding()" ng-disabled="yAxisConfig.bandPadding >= 0.95"><i class="fa fa-minus"></i></a>\n                <a href class="btn btn-default btn-xs" ng-click="decrBandPadding()" ng-disabled="yAxisConfig.bandPadding <= 0.05"><i class="fa fa-plus"></i></a>\n            </li>\n        </ul>\n    </div>\n</div>\n\n</vis-dialog>')
}]),angular.module("js/filter/dateFilterTag.html",[]).run(["$templateCache",function(a){a.put("js/filter/dateFilterTag.html",'<div class="btn-group filter-tag date">\n    <a class="btn btn-default">\n        <span popover-placement="bottom" popover-popup-delay="500" popover-append-to-body="true"\n              popover-trigger="mouseenter" popover="Indicates the span of time represented on the map">{{arg.arg.start_date}} - {{arg.arg.end_date}} </span>\n        <span class="badge"\n              popover-placement="bottom" popover-popup-delay="500" popover-append-to-body="true"\n              popover-trigger="mouseenter" popover="{{badgeTooltip}}">{{counts | speciesBadge:badgeFormat}}</span>\n    </a>\n    <a class="btn btn-default" ng-click="removeFromFilter(arg)">\n        <i class="fa fa-times-circle-o"></i>\n    </a>\n</div>')}]),angular.module("js/filter/filterControl.html",[]).run(["$templateCache",function(a){a.put("js/filter/filterControl.html",'<ul class="list-unstyled">\n    <li>\n        <label for="yearInputForm">Select up to ten (consecutive) years</label>\n        <form id="yearInputForm" name="yearInputForm">\n        <input id="start_date" type="number" class="form-control"\n               max="{{selected.date.end_date || thisYear}}"\n               ng-model="selected.date.start_date"\n               typeahead="year for year in validYears | lte:selected.date.end_date | filter:$viewValue"\n               required placeholder="From" /> - \n        <input id="end_date" type="number" class="form-control"\n                min="{{selected.date.start_date || 1900}}"\n                ng-model="selected.date.end_date"\n                typeahead="year for year in validYears | gte:selected.date.start_date | filter:$viewValue"\n                required placeholder="To" />\n        <button class="btn btn-default"\n                ng-disabled="yearInputForm.$invalid || ((selected.date.end_date - selected.date.start_date) > 10)"\n                ng-click="addDateRangeToFilter()"\n                popover-placement="right" popover-popup-delay="500" popover-append-to-body="true"\n                popover-trigger="mouseenter" popover="Add this filter to the map"><i class="fa fa-plus"></i></button>\n        </form>\n        <p ng-if="selected.date.start_date < 2008" class="disclaimer">\n            You have selected a starting year prior to 2008 when the contemprary phenology data begins.  Prior to 2008 there is\n            a much more limited set of historical data and a limited number of species (E.g. lilac and honeysuckle).\n        </p>\n    </li>\n    <li class="divider" ng-if="filterHasDate()"></li>\n    <li ng-if="filterHasDate()">\n        <label>Animal Types</label>\n        <div isteven-multi-select\n            max-labels="3"\n            input-model="animalTypes"\n            output-model="speciesInput.animals"\n            button-label="species_type"\n            item-label="species_type"\n            tick-property="selected"\n            orientation="horizontal"\n            helper-elements="all none reset filter"\n            on-close="findSpecies()"></div>\n    </li>\n    <li ng-if="filterHasDate()">\n        <label>Plant Types</label>\n        <div isteven-multi-select\n            max-labels="3"\n            input-model="plantTypes"\n            output-model="speciesInput.plants"\n            button-label="species_type"\n            item-label="species_type"\n            tick-property="selected"\n            orientation="horizontal"\n            helper-elements="all none reset filter"\n            on-close="findSpecies()"></div>\n    </li>\n    <li ng-if="filterHasDate()">\n        <label>Partners</label>\n        <div class="row">\n            <div class="col-xs-9">\n                <div isteven-multi-select\n                    max-labels="3"\n                    input-model="partners"\n                    output-model="speciesInput.networks"\n                    button-label="network_name"\n                    item-label="network_name"\n                    tick-property="selected"\n                    orientation="horizontal"\n                    helper-elements="all none reset filter"\n                    on-close="findSpecies()"></div>\n            </div>\n            <div class="col-xs-3">\n                <button class="btn btn-default" ng-disabled="!speciesInput.networks.length" ng-click="addNetworksToFilter()"\n                        popover-placement="right" popover-popup-delay="500"\n                        popover-trigger="mouseenter" popover="Add this filter to the map" popover-append-to-body="true">\n                    <i class="fa fa-plus"></i>\n                </button>\n            </div>\n        </div>\n\n    </li>\n    <li ng-if="filterHasDate()">\n        <label for="species">Species</label>\n        <div class="row">\n            <div class="col-xs-9">\n                <div isteven-multi-select\n                    max-labels="3"\n                    input-model="speciesList"\n                    output-model="selected.species"\n                    button-label="display"\n                    item-label="display"\n                    tick-property="selected"\n                    orientation="horizontal"\n                    helper-elements="none reset filter"></div>\n            </div>\n            <div class="col-xs-3">\n                <button class="btn btn-default" ng-disabled="!selected.species.length" ng-click="addSpeciesToFilter()"\n                        popover-placement="right" popover-popup-delay="500"\n                        popover-trigger="mouseenter" popover="Add this filter to the map" popover-append-to-body="true">\n                    <i class="fa" ng-class="{\'fa-refresh fa-spin\': findingSpecies, \'fa-plus\': !findingSpecies}"></i>\n                </button>\n            </div>\n        </div>\n    </li>\n    <li ng-if="filterHasDate()" style="text-align: right;">\n        <a class="btn btn-lg btn-primary" id="filter-placebo" href ng-click="$parent.$parent.close()" ng-disabled="!filterHasSufficientCriteria()">Execute Filter <i class="fa fa-search"></i></a>\n    </li>\n</ul>\n')}]),angular.module("js/filter/filterTags.html",[]).run(["$templateCache",function(a){a.put("js/filter/filterTags.html",'<ul class="list-inline filter-tags">\n    <li ng-repeat="s in getFilter().getSpeciesArgs()"><species-filter-tag arg="s"></species-filter-tag></li>\n    <li ng-repeat="n in getFilter().getNetworkArgs()"><network-filter-tag arg="n"></network-filter-tag></li>\n    <li ng-if="(date = getFilter().getDateArg())"><date-filter-tag arg="date"></date-filter-tag></li>\n</ul>')}]),angular.module("js/filter/networkFilterTag.html",[]).run(["$templateCache",function(a){a.put("js/filter/networkFilterTag.html",'<div class="btn-group filter-tag date">\n    <a class="btn btn-default">\n        <span popover-placement="bottom" popover-popup-delay="500" popover-append-to-body="true"\n              popover-trigger="mouseenter" popover="Indicates the span of time represented on the map">{{arg.arg.network_name}} </span>\n        <span class="badge"\n              popover-placement="bottom" popover-popup-delay="500" popover-append-to-body="true"\n              popover-trigger="mouseenter" popover="{{badgeTooltip}}">{{arg.counts | speciesBadge:badgeFormat}}</span>\n    </a>\n    <a class="btn btn-default" ng-click="removeFromFilter(arg)">\n        <i class="fa fa-times-circle-o"></i>\n    </a>\n</div>')}]),angular.module("js/filter/speciesFilterTag.html",[]).run(["$templateCache",function(a){a.put("js/filter/speciesFilterTag.html",'<div class="btn-group filter-tag" ng-class="{open: status.isopen}">\n    <a class="btn btn-primary" style="background-color: {{arg.color}};" ng-disabled="!arg.phenophases" ng-click="status.isopen = !status.isopen">\n        {{arg.arg | speciesTitle:titleFormat}} \n        <span class="badge"\n              popover-placement="bottom" popover-popup-delay="500" popover-append-to-body="true"\n              popover-trigger="mouseenter" popover="{{badgeTooltip}}">{{arg.counts | speciesBadge:badgeFormat}}</span> \n        <span class="caret"></span>\n    </a>\n    <ul class="dropdown-menu phenophase-list" role="menu">\n        <li class="inline">Select <a href ng-click="selectAll(true)">all</a> <a href ng-click="selectAll(false)">none</a></li>\n        <li class="divider"></li>\n        <li ng-repeat="phenophase in arg.phenophases | filter:hasCount">\n            <input type="checkbox" ng-model="phenophase.selected"> <span class="badge">{{phenophase.count}}</span> {{phenophase.phenophase_name}}\n        </li>\n    </ul>\n    <a class="btn btn-primary" style="background-color: {{arg.color}};" ng-click="removeFromFilter(arg)">\n        <i class="fa fa-times-circle-o"></i>\n    </a>\n</div>')}]),angular.module("js/layers/layerControl.html",[]).run(["$templateCache",function(a){a.put("js/layers/layerControl.html",'<ul class="list-unstyled">\n    <li><input type="radio" id="layer-none" ng-model="layerOnMap.layer" value="none"/> <label for="layer-none">None</label></li>\n    <li ng-repeat="layer in layers">\n        <input type="radio" id="layer-{{layer.id}}" ng-model="layerOnMap.layer" ng-value="layer"/> <label for="layer-{{layer.id}}">{{layer.label}}</label>\n        <span ng-if="layer.source">(<a href="{{layer.source}}" target="_blank">Source</a>)</span>\n        <span ng-if="layer.img">\n            <a ng-if="layer.link" href="{{layer.link}}" target="_blank"><img ng-src="{{layer.img}}" /></a>\n            <img ng-if="!layer.link" ng-src="{{layer.img}}" />\n        </span>\n    </li>\n</ul>')}]),angular.module("js/map/map.html",[]).run(["$templateCache",function(a){a.put("js/map/map.html",'<a title="Reset" href id="reset-control" class="btn btn-default btn-xs" ng-click="reset()"><i class="fa fa-refresh"></i></a>\n\n<npn-working></npn-working>\n\n<ui-gmap-google-map ng-if="map" center=\'map.center\' zoom=\'map.zoom\' options="map.options">\n    <npn-stations ng-if="stationView"></npn-stations>\n    <npn-filter-results></npn-filter-results>\n</ui-gmap-google-map>\n\n<share-control></share-control>\n<filter-tags></filter-tags>\n\n<toolbar>\n    <tool id="filter" icon="fa-search" title="Filter">\n        <filter-control></filter-control>\n    </tool>\n    <tool id="layers" icon="fa-bars" title="Layers">\n        <layer-control></layer-control>\n    </tool>\n    <tool id="visualizations" icon="fa-bar-chart" title="Visualizations">\n        <vis-control></vis-control>\n    </tool>\n    <tool id="settings" icon="fa-cog" title="Settings">\n        <settings-control></settings-control>\n    </tool>\n</toolbar>')}]),angular.module("js/scatter/scatter.html",[]).run(["$templateCache",function(a){a.put("js/scatter/scatter.html",'<vis-dialog title="Scatter Plot" modal="modal">\n<form class="form-inline plot-criteria-form">\n    <div class="form-group">\n        <label for="toPlotInput">Select up to three species phenophase combinations</label>\n        <select name="toPlotInput" class="form-control" ng-model="selection.toPlot" ng-options="o.phenophase_name group by (o|speciesTitle) for o in plottable"></select>\n        <div class="btn-group" dropdown is-open="selection.color_isopen">\n          <button type="button" class="btn btn-default dropdown-toggle" dropdown-toggle style="background-color: {{colorScale(selection.color)}};">\n            &nbsp; <span class="caret"></span>\n          </button>\n          <ul class="dropdown-menu" role="menu">\n            <li ng-repeat="i in colors track by $index" style="background-color: {{colorScale($index)}};"><a href ng-click="selection.color=$index;">&nbsp;</a></li>\n          </ul>\n        </div>\n    </div>\n    <button class="btn btn-default" ng-click="addToPlot()" ng-disabled="!canAddToPlot()"><i class="fa fa-plus"></i></button>\n</form>\n\n<div class="panel panel-default main-vis-panel" >\n    <div class="panel-body">\n        <center>\n        <ul class="to-plot list-inline animated-show-hide" ng-if="toPlot.length">\n            <li class="criteria" ng-repeat="tp in toPlot">{{tp|speciesTitle}}/{{tp.phenophase_name}} <i style="color: {{colorScale(tp.color)}};" class="fa fa-circle"></i>\n                <a href ng-click="removeFromPlot($index)"><i class="fa fa-times-circle-o"></i></a>\n            </li>\n            <li>\n                <select class="form-control vis-axis" ng-model="selection.axis" ng-options="o as o.label for o in axis"></select>\n            </li>\n            <li>\n                <label for="fitLinesInput">Fit Line{{toPlot.length > 1 ? \'s\' : \'\'}}</label>\n                <input type="checkbox" id="fitLinesInput" ng-model="selection.regressionLines" />\n            </li>\n            <li ng-if="!data"><button class="btn btn-primary" ng-click="visualize()">Visualize</button></li>\n        </ul>\n        <div id="vis-container">\n            <div id="vis-working" ng-show="working"><i class="fa fa-circle-o-notch fa-spin fa-5x"></i></div>\n            <svg class="chart"></svg>\n            <div ng-if="filteredDisclaimer" class="filter-disclaimer">For quality assurance purposes, only onset dates that are preceded by negative observations are included in the visualization.</div>\n        </div>\n        </center>\n    </div>\n</div>\n<pre ng-if="record">{{record | json}}</pre>\n\n</vis-dialog>')}]),angular.module("js/settings/settingsControl.html",[]).run(["$templateCache",function(a){a.put("js/settings/settingsControl.html",'<ul class="list-unstyled">\n    <li>\n        <Label for="clusterMarkersSetting">Cluster Markers</label>\n        <ul class="list-unstyled">\n            <li ng-repeat="option in [true,false]">\n                <input type="radio" id="clusterMarkers{{option}}" ng-model="settings.clusterMarkers.value"\n                       ng-value="{{option}}" /> <label for="clusterMarkers{{option}}">{{option | yesNo}}</label>\n            </li>\n        </ul>\n    </li>\n    <li class="divider"></li>\n    <li>\n        <label>Species Badge Contents</label>\n        <ul class="list-unstyled">\n            <li ng-repeat="option in settings.tagBadgeFormat.options">\n                <input type="radio"\n                       id="{{option.value}}" ng-model="settings.tagBadgeFormat.value"\n                       value="{{option.value}}"> <label for="{{option.value}}">{{option.label}}</label>\n            </li>\n        </ul>\n    </li>\n    <li class="divider"></li>\n    <li>\n        <label>Species Tag Title</label>\n        <ul class="list-unstyled">\n            <li ng-repeat="option in settings.tagSpeciesTitle.options">\n                <input type="radio"\n                       id="{{option.value}}" ng-model="settings.tagSpeciesTitle.value"\n                       value="{{option.value}}"> <label for="{{option.value}}">{{option.label}}</label>\n            </li>\n        </ul>\n    </li>\n    <li class="divider"></li>\n    <li>\n        <Label for="clusterMarkersSetting">Exclude low quality data from visualizations</label>\n        <ul class="list-unstyled">\n            <li ng-repeat="option in [true,false]">\n                <input type="radio" id="filterLqdSummary{{option}}" ng-model="settings.filterLqdSummary.value"\n                       ng-value="{{option}}" /> <label for="filterLqdSummary{{option}}">{{option | yesNo}}</label>\n            </li>\n        </ul>\n    </li>\n</ul>')}]),angular.module("js/toolbar/tool.html",[]).run(["$templateCache",function(a){a.put("js/toolbar/tool.html",'<div class="tool-content {{title.toLowerCase()}}" ng-show="selected">\n    <h2>{{title}}</h2>\n    <div ng-transclude>\n    </div>\n</div>')}]),angular.module("js/toolbar/toolbar.html",[]).run(["$templateCache",function(a){a.put("js/toolbar/toolbar.html",'<div class="toolbar">\n  <ul class="tools-list">\n    <li ng-repeat="t in tools" ng-class="{open: t.selected}"\n        popover-placement="right" popover="{{t.title}}" popover-trigger="mouseenter" popover-popup-delay="1000"\n        ng-click="select(t)">\n      <i class="fa {{t.icon}}"></i>\n    </li>\n  </ul>\n  <div class="toolbar-content" ng-class="{open: open}" ng-transclude></div>\n</div>')}]),angular.module("js/vis/visControl.html",[]).run(["$templateCache",function(a){a.put("js/vis/visControl.html",'<p class="empty-filter-notes" ng-if="isFilterEmpty()">\n    Before using a visualization you must create and execute a filter.\n    Visualizations use the species, and sometimes, date ranges you\'ve identified\n    in your filter as the basis for what you want to visualize.\n</p>\n<ul class="list-unstyled">\n    <li ng-repeat="vis in visualizations">\n        <a href ng-click="open(vis)" ng-class="{disabled: isFilterEmpty()}">{{vis.title}}</a>\n        <p>{{vis.description}}</p>\n    </li>\n</ul>')}]),angular.module("js/vis/visDialog.html",[]).run(["$templateCache",function(a){a.put("js/vis/visDialog.html",'<div class="modal-header">\n    <a href class="modal-dismiss" ng-click="modal.dismiss()"><i class="fa fa-times-circle-o fa-2x"></i></a>\n    <h3 class="modal-title">{{title}}</h3>\n</div>\n<div class="modal-body vis-dialog {{title | cssClassify}}" ng-transclude>\n</div>')}]),angular.module("npn-viz-tool.vis-scatter",["npn-viz-tool.vis","npn-viz-tool.filter","npn-viz-tool.filters","npn-viz-tool.settings","ui.bootstrap"]).controller("ScatterVisCtrl",["$scope","$modalInstance","$http","$timeout","$filter","FilterService","ChartService","SettingsService",function(a,b,c,d,e,f,g,h){function i(){return angular.extend({},a.selection.toPlot,{color:a.selection.color})}function j(){function b(b){return b[a.selection.axis.key]}if(k){a.working=!0;var c=1;q.domain([d3.min(k,b)-c,d3.max(k,b)+c]),r.scale(q).tickFormat(d3.format(".2f"));var d=l.selectAll("g .x.axis");d.call(r),d.selectAll(".axis-label").remove(),d.append("text").attr("class","axis-label").attr("x",p.width/2).attr("dy","3em").style("text-anchor","middle").text(a.selection.axis.label);var f=l.selectAll(".circle").data(k,function(a){return a.id});f.exit().remove(),f.enter().append("circle").attr("class","circle"),f.attr("cx",function(b){return q(b[a.selection.axis.key])}).attr("cy",function(a){return s(a.first_yes_doy)}).attr("r","5").attr("fill",function(a){return a.color}).on("click",function(b){d3.event.defaultPrevented||a.$apply(function(){a.record=b})}).append("title").text(function(a){return u(a.day_in_range)+" ["+a.latitude+","+a.longitude+"]"});var h=[],i=d3.format(".2f");angular.forEach(a.toPlot,function(b){var c=a.colorScale(b.color),d=k.filter(function(a){return a.color===c});if(d.length>0){var f=d.sort(function(b,c){return b[a.selection.axis.key]-c[a.selection.axis.key]}),j=f.map(function(b){return b[a.selection.axis.key]}),l=f.map(function(a){return a.first_yes_doy}),m=g.leastSquares(j,l),n=j[0],o=g.approxY(m,n),p=j[j.length-1],q=g.approxY(m,p);h.push({id:b.species_id+"."+b.phenophase_id,legend:e("speciesTitle")(b)+"/"+b.phenophase_name+(a.selection.regressionLines?" (R^2 = "+i(m[2])+")":""),color:c,p1:[n,o],p2:[p,q]})}});var j=l.selectAll(".regression").data(h,function(a){return a.id});j.exit().remove(),j.enter().append("line").attr("class","regression"),j.attr("data-legend",function(a){return a.legend}).attr("data-legend-color",function(a){return a.color}).attr("x1",function(a){return q(a.p1[0])}).attr("y1",function(a){return s(a.p1[1])}).attr("x2",function(a){return q(a.p2[0])}).attr("y2",function(a){return s(a.p2[1])}).attr("stroke",function(a){return a.color}).attr("stroke-width",2).style("display",a.selection.regressionLines?"inherit":"none"),l.select(".legend").remove();{l.append("g").attr("class","legend").attr("transform","translate(30,-45)").style("font-size","12px").call(d3.legend)}a.selection.regressionLines&&l.selectAll(".legend text").html(function(a){return a.key.replace("R^2",'R<tspan style="baseline-shift: super; font-size: 8px;">2</tspan>')}),a.working=!1}}a.modal=b,a.colorScale=f.getColorScale(),a.colors=a.colorScale.domain(),a.axis=[{key:"latitude",label:"Latitude"},{key:"longitude",label:"Longitude"},{key:"elevation_in_meters",label:"Elevation (m)"}],a.selection={color:0,axis:a.axis[0],regressionLines:!1},a.$watch("selection.regressionLines",function(a,b){a!==b&&j()}),a.$watch("selection.axis",function(a,b){a!==b&&j()}),a.plottable=[],angular.forEach(f.getFilter().getSpeciesArgs(),function(b){angular.forEach(b.phenophases,function(c){a.plottable.push(angular.extend({},b.arg,c))})}),a.toPlot=[],a.canAddToPlot=function(){if(!a.selection.toPlot||3===a.toPlot.length)return!1;if(0===a.toPlot.length)return!0;var b,c=i();for(b=0;b<a.toPlot.length;b++)if(angular.equals(a.toPlot[b],c))return!1;for(b=0;b<a.toPlot.length;b++)if(c.color===a.toPlot[b].color)return!1;return!0};var k,l,m=f.getFilter().getDateArg(),n=m.arg.start_date,o=new Date(n,0),p=(m.arg.end_date,g.getSizeInfo({top:80,left:60})),q=d3.scale.linear().range([0,p.width]).domain([0,100]),r=d3.svg.axis().scale(q).orient("bottom"),s=d3.scale.linear().range([p.height,0]).domain([1,365]),t=d3.time.format("%x"),u=function(a){var b=(a-1)*g.ONE_DAY_MILLIS+o.getTime(),c=new Date(b);return t(c)},v=d3.svg.axis().scale(s).orient("left");d(function(){l=d3.select(".chart").attr("width",p.width+p.margin.left+p.margin.right).attr("height",p.height+p.margin.top+p.margin.bottom).append("g").attr("transform","translate("+p.margin.left+","+p.margin.top+")"),l.append("g").attr("class","x axis").attr("transform","translate(0,"+p.height+")").call(r),l.append("g").attr("class","y axis").call(v).append("text").attr("transform","rotate(-90)").attr("y","0").attr("dy","-3.5em").attr("x",-1*(p.height/2)).style("text-anchor","middle").text("Onset DOY")},500),a.addToPlot=function(){a.selection.toPlot&&(a.toPlot.push(i()),a.selection.color++,a.data=k=void 0)},a.removeFromPlot=function(b){a.toPlot.splice(b,1),a.data=k=void 0},a.visualize=function(){if(k)return j();a.working=!0,console.log("visualize",a.selection.axis,a.toPlot);var b=f.getFilter().getDateArg(),c={request_src:"npn-vis-scatter-plot",start_date:b.getStartDate(),end_date:b.getEndDate()},d=0,e={};angular.forEach(a.toPlot,function(a){e[a.species_id+"."+a.phenophase_id]=a.color,c["species_id["+d+"]"]=a.species_id,c["phenophase_id["+d++ +"]"]=a.phenophase_id}),g.getSummarizedData(c,function(b){var c=h.getSettingValue("filterLqdSummary");a.data=k=b.filter(function(b,d){var f=!c||b.numdays_since_prior_no>=0;return f&&(b.id=d,b.day_in_range=365*(b.first_yes_year-n)+b.first_yes_doy,b.color=a.colorScale(e[b.species_id+"."+b.phenophase_id])),f}),console.log("filtered out "+(b.length-k.length)+"/"+b.length+" records with negative num_days_prior_no."),a.filteredDisclaimer=b.length!=k.length,console.log("scatterPlot data",k),j()})}}]),angular.module("npn-viz-tool.settings",["npn-viz-tool.filters"]).factory("SettingsService",[function(){var a={clusterMarkers:{name:"cluster-markers",q:"cm",value:!0},tagSpeciesTitle:{name:"tag-species-title",q:"tst",value:"common-name",options:[{value:"common-name",q:"cn",label:"Common Name"},{value:"scientific-name",q:"sn",label:"Scientific Name"}]},tagBadgeFormat:{name:"tag-badge-format",q:"tbf",value:"observation-count",options:[{value:"observation-count",q:"oc",label:"Observation Count"},{value:"station-count",q:"sc",label:"Station Count"},{value:"station-observation-count",q:"soc",label:"Station Count/Observation Count"}]},filterLqdSummary:{name:"filter-lqd-summary",q:"flqdf",value:!0}};return{getSettings:function(){return a},getSetting:function(b){return a[b]},getSettingValue:function(b){return a[b].value},getSettingValueLabel:function(b){var c,d=a[b],e=d.value;for(c=0;d.options&&c<d.options.length;c++)if(d.options[c].value===e)return d.options[c].label},getSharingUrlArgs:function(){var b,c,d,e="";for(b in a)if(c=a[b],e+=(""!==e?";":"")+c.q+"=",c.options){for(d=0;d<c.options.length;d++)if(c.value===c.options[d].value){e+=c.options[d].q;break}}else e+=c.value;return"ss="+encodeURIComponent(e)},populateFromSharingUrlArgs:function(b){b&&b.split(";").forEach(function(b){var c,d,e=b.split("="),f=e[0],g=e[1];for(c in a)if(a[c].q===f){if(a[c].options){for(d=0;d<a[c].options.length;d++)if(a[c].options[d].q===g){a[c].value=a[c].options[d].value;break}}else a[c].value="true"===g||"false"===g?"true"===g:g;break}})}}}]).directive("settingsControl",["$rootScope","$location","SettingsService",function(a,b,c){return{restrict:"E",templateUrl:"js/settings/settingsControl.html",controller:function(d){function e(b){console.log("broadcastSettingChange",d.settings[b]),a.$broadcast("setting-update-"+b,d.settings[b])}function f(a){d.$watch("settings."+a+".value",function(){e(a)})}c.populateFromSharingUrlArgs(b.search().ss),d.settings=c.getSettings();for(var g in d.settings)f(g)}}}]),angular.module("npn-viz-tool.share",["npn-viz-tool.filter","npn-viz-tool.layers","npn-viz-tool.settings","uiGmapgoogle-maps"]).directive("shareControl",["uiGmapIsReady","FilterService","LayerService","DateFilterArg","SpeciesFilterArg","NetworkFilterArg","GeoFilterArg","$location","SettingsService",function(a,b,c,d,e,f,g,h,i){return{restrict:"E",template:'<a title="Share" href id="share-control" class="btn btn-default btn-xs" ng-disabled="!getFilter().hasSufficientCriteria()" ng-click="share()"><i class="fa fa-share"></i></a><div ng-show="url" id="share-content"><input type="text" class="form-control" ng-model="url" ng-blur="url = null" onClick="this.setSelectionRange(0, this.value.length)"/></div>',scope:{},controller:function(c){b.pause(),a.promise(1).then(function(){function a(){r&&o===n&&p===q&&(console.log("ready.."),j(),k(),l(),b.resume())}function g(a){e.fromString(a).then(b.addToFilter)}function i(a){f.fromString(a).then(b.addToFilter)}var j,k,l,m=h.search(),n=0,o=0,p=0,q=0,r=!1;if(j=c.$on("layers-ready",function(){console.log("layers ready..."),r=!0,a()}),k=c.$on("species-filter-ready",function(b,c){console.log("species filter ready...",c),o++,a()}),l=c.$on("network-filter-ready",function(b,c){console.log("network filter ready...",c),q++,a()}),console.log("qargs",m),m.d&&(m.s||m.n)){if(b.addToFilter(d.fromString(m.d)),m.s){var s=m.s.split(";");n=s.length,s.forEach(g)}if(m.n){var t=m.n.split(";");p=t.length,t.forEach(i)}}else b.resume()}),c.getFilter=b.getFilter,c.share=function(){if(c.url)return void(c.url=null);var a=b.getFilter(),d={},e=h.absUrl(),f=e.indexOf("?");d.d=a.getDateArg().toString(),a.getSpeciesArgs().forEach(function(a){d.s?d.s+=";"+a.toString():d.s=a.toString()}),a.getNetworkArgs().forEach(function(a){d.n?d.n+=";"+a.toString():d.n=a.toString()}),a.getGeoArgs().forEach(function(a){d.g?d.g+=";"+a.toString():d.g=a.toString()}),-1!=f&&(e=e.substring(0,f)),e+=-1===e.indexOf("#")?"#?":"?",Object.keys(d).forEach(function(a,b){e+=(b>0?"&":"")+a+"="+encodeURIComponent(d[a])}),e+="&"+i.getSharingUrlArgs(),console.log("absUrl",e),c.url=e}}}}]),angular.module("npn-viz-tool.stations",["npn-viz-tool.settings","npn-viz-tool.layers"]).directive("npnStations",["$http","LayerService","SettingsService",function(a,b,c){return{restrict:"E",template:'<ui-gmap-markers models="regions.markers" idKey="\'name\'" coords="\'self\'" icon="\'icon\'" options="\'markerOpts\'" isLabel="true"></ui-gmap-markers><ui-gmap-markers models="stations.markers" idKey="\'station_id\'" coords="\'self\'" icon="\'icon\'" options="\'markerOpts\'" doCluster="doCluster"></ui-gmap-markers>',scope:{},controller:["$scope",function(d){d.doCluster=c.getSettingValue("clusterMarkers"),d.$on("setting-update-clusterMarkers",function(a,b){d.doCluster=b.value}),d.regions={markers:[]},d.stations={states:[],markers:[]};var e=[];a.get("/npn_portal/stations/getStationCountByState.json").success(function(c){var f=c.reduce(function(a,b){return a[b.state]=b,b.number_stations=parseInt(b.number_stations),a.$min=Math.min(a.$min,b.number_stations),a.$max=Math.max(a.$max,b.number_stations),a},{$max:0,$min:0}),g=d3.scale.linear().domain([f.$min,f.$max]).range(["#F7FBFF","#08306B"]);b.resetLayers().then(function(){b.loadLayer("primary",function(a){var b=a.getProperty("NAME"),c=-1!=d.stations.states.indexOf(b),e=f[b],h={strokeOpacity:1,strokeColor:"#ffffff",strokeWeight:1,fillOpacity:0};if(e&&!c){e.visited=!0,h.fillOpacity=.8,h.fillColor=g(e.number_stations),h.clickable=!0;var i=a.getProperty("CENTER"),j=angular.extend({name:b,icon:{path:google.maps.SymbolPath.CIRCLE,fillColor:"#000",fillOpacity:.5,scale:16,strokeColor:"#ccc",strokeWeight:1},markerOpts:{title:b,labelClass:"station-count",labelContent:""+e.number_stations}},i);e.number_stations<10?(j.icon.scale=8,j.markerOpts.labelAnchor="4 8"):e.number_stations<100?(j.icon.scale=12,j.markerOpts.labelAnchor="8 8"):e.number_stations<1e3?(j.icon.scale=14,j.markerOpts.labelAnchor="10 8"):j.markerOpts.labelAnchor="13 8",d.$apply(function(){d.regions.markers.push(j)})}else c||console.warn("no station count for "+b);return h}).then(function(b){var c=b[0];e.push(c.data.addListener("mouseover",function(a){c.data.overrideStyle(a.feature,{strokeWeight:3})})),e.push(c.data.addListener("mouseout",function(){c.data.revertStyle()})),e.push(c.data.addListener("click",function(b){var e=b.feature.getProperty("NAME");-1===d.stations.states.indexOf(e)&&(d.stations.states.push(e),c.panTo(b.latLng),c.setZoom(6),a.get("/npn_portal/stations/getAllStations.json",{params:{state_code:e}}).success(function(a){a.forEach(function(a){a.markerOpts={title:a.station_name}}),d.stations.markers=d.stations.markers.concat(a),c.data.remove(b.feature);for(var f=[],g=0;g<d.regions.markers.length;g++)d.regions.markers[g].name!==e&&f.push(d.regions.markers[g]);d.regions.markers=f}))}))})})}),d.$on("$destroy",function(){b.resetLayers(),e.forEach(function(a){a.remove()})})}]}}]),angular.module("npn-viz-tool.toolbar",[]).directive("toolbar",["$rootScope",function(a){return{restrict:"E",templateUrl:"js/toolbar/toolbar.html",transclude:!0,scope:{},controller:function(b){function c(b){a.$broadcast("tool-"+(b.selected?"open":"close"),{tool:b})}var d=b.tools=[];b.select=function(a){a.selected=!a.selected,b.open=a.selected,c(a)},this.addTool=function(a){d.push(a)},this.closeTool=function(a){b.open=a.selected=!1,c(a)}}}}]).directive("tool",[function(){return{restrict:"E",require:"^toolbar",templateUrl:"js/toolbar/tool.html",transclude:!0,scope:{id:"@",title:"@",icon:"@"},link:function(a,b,c,d){d.addTool(a),a.close=function(){d.closeTool(a)}}}}]),angular.module("npn-viz-tool.vis",["npn-viz-tool.filter","npn-viz-tool.filters","npn-viz-tool.vis-scatter","npn-viz-tool.vis-calendar","ui.bootstrap"]).factory("ChartService",["$window","$http","FilterService",function(a,b,c){function d(a){var b=0===a.latitude||0===a.longitude||a.elevation_in_meters<0;return b&&console.warn("suspect station data",a),!b}function e(a){return c.getFilter().getGeoArgs().length&&c.getFilteredMarkers().forEach(function(b,c){a["station_id["+c+"]"]=b.station_id}),a}function f(a){var b,c=[];for(b in a)c.push(encodeURIComponent(b)+"="+encodeURIComponent(a[b]));return c.join("&")}var g=930,h=500,i={top:20,right:30,bottom:60,left:40},j=(g-i.left-i.right,h-i.top-i.bottom,{ONE_DAY_MILLIS:864e5,getSizeInfo:function(b){var c=angular.extend({},i,b),d=Math.round(.9*a.innerWidth),e=Math.round(.5376*d),f=d-c.left-c.right,g=e-c.top-c.bottom,h={width:f,height:g,margin:c};return console.log("sizing",h),h},leastSquares:function(a,b){var c=function(a,b){return a+b},d=1*a.reduce(c)/a.length,e=1*b.reduce(c)/b.length,f=a.map(function(a){return Math.pow(a-d,2)}).reduce(c),g=b.map(function(a){return Math.pow(a-e,2)}).reduce(c),h=a.map(function(a,c){return(a-d)*(b[c]-e)}).reduce(c),i=h/f,j=e-d*i,k=Math.pow(h,2)/(f*g);return[i,j,k]},approxY:function(a,b){var c=a[1],d=a[0];return c+d*b},getSummarizedData:function(a,c){b({method:"POST",url:"/npn_portal/observations/getSummarizedData.json",headers:{"Content-Type":"application/x-www-form-urlencoded"},transformRequest:f,data:e(a)}).success(function(a){c(a.filter(d))})},getPositiveDates:function(a,c){b({method:"POST",url:"/npn_portal/observations/getPositiveDates.json",headers:{"Content-Type":"application/x-www-form-urlencoded"},transformRequest:f,data:e(a)}).success(c)
}});return j}]).directive("visDialog",[function(){return{restrict:"E",templateUrl:"js/vis/visDialog.html",transclude:!0,scope:{title:"@",modal:"="},controller:["$scope",function(){}]}}]).directive("visControl",["$modal","FilterService",function(a,b){var c=[{title:"Scatter Plot",controller:"ScatterVisCtrl",template:"js/scatter/scatter.html",description:"This visualization allows you to plot various geographic or climactic variables on the X axis against Onset Day Of Year on the Y axis.  Up to three Species/Phenophase pairs may be plotted."},{title:"Calendar",controller:"CalendarVisCtrl",template:"js/calendar/calendar.html",description:'This visualization illustrates phenophase activity for various species/phenophase pairs of your choosing.  Horizontal bars are graphed representing a "calendar" of phenological activity at a regional level for up to two years allowing year to year comparison of activity.'}];return{restrict:"E",templateUrl:"js/vis/visControl.html",scope:{},controller:function(d){d.isFilterEmpty=b.isFilterEmpty,d.visualizations=c,d.open=function(c){b.isFilterEmpty()||a.open({templateUrl:c.template,controller:c.controller,windowClass:"vis-dialog-window",backdrop:"static",keyboard:!1,size:"lg"})}}}}]);